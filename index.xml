<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Welcome to Rick&#39;s Page</title>
    <link>https://874656645.github.io/rick/</link>
    <description>Recent content on Welcome to Rick&#39;s Page</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 28 Feb 2019 17:01:31 +0800</lastBuildDate>
    
	<atom:link href="https://874656645.github.io/rick/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Power Shell ExecutionPolicy</title>
      <link>https://874656645.github.io/rick/posts/power-shell-executionpolicy/</link>
      <pubDate>Thu, 28 Feb 2019 17:01:31 +0800</pubDate>
      
      <guid>https://874656645.github.io/rick/posts/power-shell-executionpolicy/</guid>
      <description>Power shell执行策略 原文网址
1、查看当前的安全策略 Get-ExecutionPolicy
2、修改执行策略 ps:这种方法会将执行策略保存到注册表 Set-ExecutionPolicy UnRestricted  or  Set-ExecutionPolicy -ExecutionPolicy RemoteSigned
3、查看所有支持的执行策略 [System.Enum]::GetNames([Microsoft.PowerShell.ExecutionPolicy])
4、获取影响当前会话的所有执行策略 Get-ExecutionPolicy -List
6、为当前 Windows PowerShell 会话设置执行策略 PowerShell.exe -ExecutionPolicy RemoteSigned</description>
    </item>
    
    <item>
      <title>Crawl Pictures From Website</title>
      <link>https://874656645.github.io/rick/posts/crawl-pictures-from-website/</link>
      <pubDate>Thu, 28 Feb 2019 15:00:16 +0800</pubDate>
      
      <guid>https://874656645.github.io/rick/posts/crawl-pictures-from-website/</guid>
      <description>1、使用requests库访问网址 2、使用xpath技术提取网页目标图片网址 3、通过os库保存图片到本地 #coding = utf-8 import requests import os from lxml import etree from urllib.parse import quote,unquote # import urllib.request class DmdSpider(object): name = &amp;quot;dmd&amp;quot; save_path = &#39;E:/python/manhuadao/pics/&#39; __picNo = 0 # 访问漫画岛网页 def start_request(self, url): header = {&#39;User-Agent&#39;: &#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36&#39;} r = requests.get(url, params=header) # print(r.text) self.__get_imgs(r) # 自动跳转下一页 html = etree.HTML(r.text) next_urls = html.xpath(&#39;//div[@class=&amp;quot;read-bottom&amp;quot;]//a[@class=&amp;quot;next&amp;quot;]/@href&#39;) # print(next) for href in next_urls: nexturl = href.</description>
    </item>
    
    <item>
      <title>Python Virtualenv</title>
      <link>https://874656645.github.io/rick/posts/python-virtualenv/</link>
      <pubDate>Sat, 16 Feb 2019 11:20:20 +0800</pubDate>
      
      <guid>https://874656645.github.io/rick/posts/python-virtualenv/</guid>
      <description> 原文网址
在python中使用virtualenv创建虚拟环境 注意：要使用cmd命令行，不能使用Power Shell
1、使用pip安装 pip install virtualenv
2、创建项目目录并用cd进入 mkdir E:\python\Virtualenv cd E:\python\Virtualenv  3、创建虚拟环境 virtualenv -p c:\Python36\python.exe env  或者  virtualenv env  此命令会在当前目录下创建一个env目录
4、启动虚拟环境 env\Scripts\activate
5、离开虚拟环境 deactivate
6、删除env文件夹即可 </description>
    </item>
    
    <item>
      <title>Scrapy_Learn</title>
      <link>https://874656645.github.io/rick/posts/scrapy_learn/</link>
      <pubDate>Fri, 15 Feb 2019 15:40:48 +0800</pubDate>
      
      <guid>https://874656645.github.io/rick/posts/scrapy_learn/</guid>
      <description>原文网址
Using a virtual environment (recommended) pip install virtualenv  详细操作
Creating a new Scrapy project scrapy startproject tutorial
Writing a spider to crawl a site and extract data This is the code for our first Spider. Save it in a file named _quotesspider.py under the tutorial/spiders directory in your project:
import scrapy class QuotesSpider(scrapy.Spider): name = &amp;quot;quotes&amp;quot; def start_requests(self): urls = [ &#39;http://quotes.toscrape.com/page/1/&#39;, &#39;http://quotes.toscrape.com/page/2/&#39;, ] for url in urls: yield scrapy.</description>
    </item>
    
    <item>
      <title>Npm Commond Learning</title>
      <link>https://874656645.github.io/rick/posts/npm-commond-learning/</link>
      <pubDate>Thu, 31 Jan 2019 17:36:00 +0800</pubDate>
      
      <guid>https://874656645.github.io/rick/posts/npm-commond-learning/</guid>
      <description>配置npm镜像源 临时使用 npm --registry https://registry.npm.taobao.org install --save-dev electron
持久使用 npm config set registry https://registry.npm.taobao.org
配置后可通过下面方式来验证是否成功 npm config get registry 或 npm info electron  通过cnpm使用 npm install -g cnpm --registry=https://registry.npm.taobao.org
使用 cnpm install express</description>
    </item>
    
    <item>
      <title>Learn Electron</title>
      <link>https://874656645.github.io/rick/posts/learn-electron/</link>
      <pubDate>Thu, 31 Jan 2019 15:44:09 +0800</pubDate>
      
      <guid>https://874656645.github.io/rick/posts/learn-electron/</guid>
      <description>Use npm run example Clone repository git clone https://github.com/electron/electron-quick-start
Go into the repository cd electron-quick-start
Install dependencies PS:为了加快下载依赖模块的速度，通过修改镜像源 ELECTRON_MIRROR=https://npm.taobao.org/mirrors/electron/ npm install  或者是  npm install --registry=https://registry.npm.taobao.org
Run the app npm start
Use yarn create a electron program Create a program folder md electron-yarn-cz  进入项目文件夹  cd electron-yarn-cz
Create a program config file yarn init
Instal electron environment yarn add electron --dev --registry=https://registry.npm.taobao.org
Add main.js and index.html Edit package.</description>
    </item>
    
    <item>
      <title>Netstat</title>
      <link>https://874656645.github.io/rick/posts/netstat/</link>
      <pubDate>Fri, 28 Dec 2018 16:10:00 +0800</pubDate>
      
      <guid>https://874656645.github.io/rick/posts/netstat/</guid>
      <description>win10查看端口使用情况 1. 产看所有已使用的端口 netstat -ano
2. 查看特定端口的使用 netstat -ano|findstr &amp;quot;443&amp;quot;
3. 查看占用端口的进程PID tasklist|findstr &amp;quot;7648&amp;quot;</description>
    </item>
    
    <item>
      <title>Git Commond</title>
      <link>https://874656645.github.io/rick/posts/git-commond/</link>
      <pubDate>Sat, 15 Dec 2018 22:45:47 +0800</pubDate>
      
      <guid>https://874656645.github.io/rick/posts/git-commond/</guid>
      <description>Commands 初始化本地仓库 cd public git init git remote add blog https://github.com/874656645/rick  更新远程仓库代码到本地 git pull blog master
将变化提交到本地仓库 git commit -m &amp;quot;delete all files&amp;quot;
push推送到远程仓库 git push blog master
添加远程仓库别名和网址 git remote add blog https://github.com/874656645/rick
删除配置的远程仓库别名 git remote remove blog
添加文件 git add -A
删除文件 git rm *
删除远程仓库中的文件、文件夹 git rm -r --cached &amp;quot;*.*&amp;quot; *.*表示全部文件和文件夹，如果想删除具体的文件或文件夹，使用具体的名称就可以了
查看所有分支 git branch -a
删除远程分支 git push blog --delete name
解决failed to push some refs to git git pull --rebase blog master</description>
    </item>
    
    <item>
      <title>Create a New Site by Hugo</title>
      <link>https://874656645.github.io/rick/posts/create-a-new-site/</link>
      <pubDate>Fri, 14 Dec 2018 22:40:04 +0800</pubDate>
      
      <guid>https://874656645.github.io/rick/posts/create-a-new-site/</guid>
      <description>创建站点 Step1：创建站点 进入到 E:/Hugo/Sites文件夹 hugo new site HugoLearning.com
Step2：添加样式主题 cd HugoLearning.com git init git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke  编辑 config.toml 配置文件 最后一行添加 theme = &amp;quot;ananke&amp;quot; 或者在命令行执行 echo &#39;theme = &amp;quot;ananke&amp;quot;&#39; &amp;gt;&amp;gt; config.toml
Step3：添加markdown文件内容 hugo new posts/Hello-Hugo.md
Step4: 启动网站 hugo server -D 
然后输入网址 http://localhost:1313/
Step5：生成网站 命令行执行 hugo，在网站目录生成public文件夹，发布的网站文件都在这个文件中 * 注意：如果看不到内容，将md文件中的draft设置为false
Step5：将网站发布到 git 使用git工具将文件上传到远程仓库就可以了，仓库还需要做一些设置；</description>
    </item>
    
    <item>
      <title>Hello Hugo</title>
      <link>https://874656645.github.io/rick/posts/hello-hugo/</link>
      <pubDate>Fri, 14 Dec 2018 22:34:27 +0800</pubDate>
      
      <guid>https://874656645.github.io/rick/posts/hello-hugo/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>