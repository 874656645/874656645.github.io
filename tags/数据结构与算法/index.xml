<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>数据结构与算法 on Slow is Smooth and Smooth is Fast</title>
    <link>https://874656645.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 数据结构与算法 on Slow is Smooth and Smooth is Fast</description>
    <image>
      <url>https://874656645.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://874656645.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 14 Mar 2022 21:30:45 +0800</lastBuildDate><atom:link href="https://874656645.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>数据结构与算法——线性表</title>
      <link>https://874656645.github.io/posts/151-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E7%BA%BF%E6%80%A7%E8%A1%A8/</link>
      <pubDate>Mon, 14 Mar 2022 21:30:45 +0800</pubDate>
      
      <guid>https://874656645.github.io/posts/151-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E7%BA%BF%E6%80%A7%E8%A1%A8/</guid>
      <description>线性结构  二元组 B = (K, R) , K = {a0, a1, …, an-1 }, R = {r}，其中 r 为前驱后继关系，具有反对称性和传递性 唯一的开始结点（表头）：没有前驱，只有一个唯一的后继 唯一的终止结点（表尾）：没有后继，只有一个唯一的前驱 内部结点：一个唯一的前驱和一个唯一的后继  线性表 线性表简称表，是零个或多个元素的有穷序列
 表目：线性表中的元素 文件：含有大量记录的线性表又称为文件 索引（下标） 表的长度 空表：长度为零的线性表(n=0)  线性表分类   按访问方式划分：
 直接访问型 顺序访问型 目录索引型    按存储方式：
 顺序表（数组） 链表    按操作：
 线性表：不限操作 栈：在同一端操作，在深度优先搜索、递归等算法中有很好的应用 队列：在两端操作，在宽度优先搜索、层次化处理中有很好的应用    顺序表  顺序表俗称向量，是用数组实现的（固定长度的一维数组） 按索引值从小到大存放在一片相邻的连续区域 结构紧凑，存储密度为1（存储密度 = 数据本身所占存储 / 整个数据结构所占存储） 物理存储关系就能表示逻辑关联关系  链表  链表需要指针表示逻辑关联关系，存储效率不如顺序表 有头链表和无头链表 在一些边界处理的时候，要注意头结点（head）和尾结点（tail）的特殊处理  讨论   线性表的分类方法有哪些？各种线性表名称中，哪些跟存储结构相关？哪些跟运算相关？</description>
    </item>
    
    <item>
      <title>数据结构与算法——算法效率与度量</title>
      <link>https://874656645.github.io/posts/150-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E7%AE%97%E6%B3%95%E6%95%88%E7%8E%87%E4%B8%8E%E5%BA%A6%E9%87%8F/</link>
      <pubDate>Sun, 13 Mar 2022 16:29:26 +0800</pubDate>
      
      <guid>https://874656645.github.io/posts/150-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E7%AE%97%E6%B3%95%E6%95%88%E7%8E%87%E4%B8%8E%E5%BA%A6%E9%87%8F/</guid>
      <description>算法的时间和空间性能非常重要
一、算法的渐近分析 当 n 增大到一定值后，其他的常数项和低幂次项都可以忽略，只需确定是在什么量级（线性、n 方、指数级等）
1. 大 O 表式法 函数增长率上限
2. 大 Ω 表式法 函数增值率的下限
3. 大 θ 表示法 当上、下限相同时则可用 θ 表示法
二、增长率曲线 三、数据结构和算法的选择  仔细分析所要解决的问题  特别是求解问题所涉及的数据类型和数据间逻辑关系（问题抽象、数据抽象） 数据结构的初步设计往往先于算法设计   注意数据结构的可扩展性  考虑当输入数据的规模发生改变时，数据结构是否能够适应求解问题的演变和扩展    三、思考题   数据结构的三个要素任何一个发生改变，都是不同的数据结构，请举例讨论
 双向链表和二叉树的存储结构其实是一样的，他们的不同在于逻辑结构。 数组和向量都是线性表，其存储形式不同，成为不同的数据结构。    算法设计目标是什么？
 时间和空间的权衡 易读 易编码 易调试 易维护 易扩展    算法选择的过程？
  要求在时间复杂度 O(n)、空间复杂度 O(1)，使数组元素循环向右移动 K 位
  </description>
    </item>
    
    <item>
      <title>数据结构与算法——算法特性及分类</title>
      <link>https://874656645.github.io/posts/149-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E7%AE%97%E6%B3%95%E7%89%B9%E6%80%A7%E5%8F%8A%E5%88%86%E7%B1%BB/</link>
      <pubDate>Fri, 11 Mar 2022 22:26:22 +0800</pubDate>
      
      <guid>https://874656645.github.io/posts/149-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E7%AE%97%E6%B3%95%E7%89%B9%E6%80%A7%E5%8F%8A%E5%88%86%E7%B1%BB/</guid>
      <description>一、问题——算法——程序  问题：一个函数，从输入到输出在一种映射 算法：对特定问题求解过程的描述，是指令的有限序列 程序：算法在计算机程序设计语言中的具体实现  二、算法的特性  通用性：参数化的，能对一类问题进行参数化输入并问题求解 有效性：有限条有效指令组成的指令序列，保证计算结果的正确性 确定性：算法的下一步执行步骤必须明确 有穷性：执行必须在有限步内结束，不能有死循环  三、基本算法分类  穷举法：
遍历每一个元素，比较低效，但是是一种万能的算法；对于一个问题，如果一时想不出好的算法的话，可对小规模数据采用穷举法剖析问题的特性和数据的特性，进而寻求更高效的算法 回溯、搜索：
能进则进，不能进则换，不能换则退，如树和图的遍历 递归分治：
二分查找，以及快速排序、归并排序，都是经典的分治算法思想 贪心法：
其数据具有贪心性质，每次求解的时候都采用当前的最佳解，最终得到最优解，如 Huffman 编码树、最短路径 Dijkstra 算法、最小生成树 Prim 算法 动态规划：
得到小规模问题的最优解，然后在更大规模的时候去组合这些最优解，最后得到全局的最优解，如图的两两结点之间最短路 Floyd 算法。要求具有最优子结构性质以及无后效性，动态规划的子结构有重叠，而递归分治子结构不重叠。  四、“监视哨”顺序检索 设置“监视哨”后，在查找过程中不用判断 i 是否越界，少一次判断，算法的运行效率会更高</description>
    </item>
    
    <item>
      <title>数据结构与算法——数据结构定义</title>
      <link>https://874656645.github.io/posts/148-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9A%E4%B9%89/</link>
      <pubDate>Thu, 10 Mar 2022 21:10:53 +0800</pubDate>
      
      <guid>https://874656645.github.io/posts/148-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9A%E4%B9%89/</guid>
      <description>一、什么是数据结构   结构：实体 + 关系，比如分子结构，关系图等
  数据结构：按照逻辑关系组织起来的一批数据，按一定的存储方法所把它存储在计算机中，并在这些数据上定义了一个运算的集合
  二、数据的逻辑结构  线性结构
线性表（表、栈、队列、串等） 非线性结构
树（二叉树、Huffman树、二叉检索树等）
图（有向图、无向图等） 图 ⊇ 树 ⊇ 二叉树 ⊇ 线性表  三、数据的存储结构   将逻辑结构的结点映射到内存中，每一个结点都对应一个唯一的连续存储区域
  内存可以看作从低地址到高地址的一个编码的线性结构，可以根据地址立即访问想要访问的内存单元，不需要搜索
  存储结构主要有顺序、链接、索引和散列四种形式
 顺序存储对应于数组 链接存储对应于链表 索引是对数据建立一个索引表，通过这个表有效的找到相应数据的存储地址 散列是一种特殊的索引结构，本身也是一种存储结构，通过关键码的映射关系，在整个散列表中用单位时间快速地找到其存储地址    四、抽象数据类型 ADT（Abstract Data Type）  定义了一组运算的数学模型 与物理存储结构无关 使软件系统建立在数据之上(面向对象)  五、定义抽象数据类型 抽象数据类型就是在逻辑结构上的运算，可以理解为抽象数据结构二元组 &amp;lt;数据对象D, 数据操作P&amp;gt;
先定义逻辑结构，再定义运算
 逻辑结构：数据对象及其关系 运算：数据操作  就像面向对象语言中所定义的类（特别是抽象类），封装了数据成员和函数成员</description>
    </item>
    
    <item>
      <title>数据结构与算法-简介</title>
      <link>https://874656645.github.io/posts/147-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Tue, 08 Mar 2022 20:33:08 +0800</pubDate>
      
      <guid>https://874656645.github.io/posts/147-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E7%AE%80%E4%BB%8B/</guid>
      <description>算法 + 数据结构 = 程序   数据结构与算法是程序的灵魂，以问题求解为导向，进行问题抽象、数据抽象、算法抽象，通过有效地组织数据、设计高效的算法、完成高质量的程序，从而解决实际应用的问题。
  流程：问题 =&amp;gt; 数据 =&amp;gt; 算法
  理论（离散数学、概率统计、图论等） =&amp;gt; 抽象（问题抽象、数据抽象、算法抽象等面向对象思想） =&amp;gt; 设计（实现的某种具体编程语言）
  逻辑抽象 + 运算抽象 =&amp;gt; ADT
  运算 + 存储 =&amp;gt; 算法分析（时间和空间复杂度）
  问题抽象：分析和抽象任务需求，建立问题模型
  数据抽象：确定恰当的数据结构表示数学模型
  算法抽象：在数据模型的基础上设计合适的算法
  </description>
    </item>
    
  </channel>
</rss>
