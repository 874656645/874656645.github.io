<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Qt on Slow is Smooth and Smooth is Fast</title>
    <link>https://874656645.github.io/tags/qt/</link>
    <description>Recent content in Qt on Slow is Smooth and Smooth is Fast</description>
    <image>
      <url>https://874656645.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://874656645.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 14 Jun 2022 09:45:15 +0800</lastBuildDate><atom:link href="https://874656645.github.io/tags/qt/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Qt 信号和槽</title>
      <link>https://874656645.github.io/posts/193-qt-%E4%BF%A1%E5%8F%B7%E5%92%8C%E6%A7%BD/</link>
      <pubDate>Tue, 14 Jun 2022 09:45:15 +0800</pubDate>
      
      <guid>https://874656645.github.io/posts/193-qt-%E4%BF%A1%E5%8F%B7%E5%92%8C%E6%A7%BD/</guid>
      <description> 信号函数没有返回值，且只是一个函数声明，必须有 signals: 声明 槽函数的函数标签必须和信号函数相同（相同的返回值类型和形参列表） Qt5 后成员函数也可作为 slots，可以不用 slots: 声明 slots: 声明前要添加访问权限修饰符 信号函数和槽函数其实都可以被重载   // signal 和 slots 都可以重载  // Qt5的方式  void(subWindow::*pFun1)() = &amp;amp;subWindow::showMainWindow;  void(MainWindow::*pSlot1)() = &amp;amp;MainWindow::onShowMainWindow;  connect(&amp;amp;sw, pFun1, this, pSlot1);  void(subWindow::*pFun2)(int,QString) = &amp;amp;subWindow::showMainWindow;  void(MainWindow::*pSlot2)(int,QString) = &amp;amp;MainWindow::onShowMainWindow;  connect(&amp;amp;sw, pFun2, this, pSlot2);   // Qt4的方式  // 1. SIGNAL、SLOT宏会把信号和槽转成字符串，所以就不能进行编译期错误检查  // 2. 槽函数前面必须有 slots 标签，否则无法识别为槽函数  connect(&amp;amp;sw, SIGNAL(showMainWindow()), this, SLOT(onShowMainWindow()));  connect(&amp;amp;sw, SIGNAL(showMainWindow(int,QString))  , this, SLOT(onShowMainWindow(int,QString)));   // Lambda 表达式  void(subWindow::*pFun1)() = &amp;amp;subWindow::showMainWindow;  connect(&amp;amp;sw, pFun1,  [](){  qDebug()&amp;lt;&amp;lt;&amp;#34;没有参数的信号&amp;#34;;  }  );  void(subWindow::*pFun2)(int,QString) = &amp;amp;subWindow::showMainWindow;  connect(&amp;amp;sw, pFun2,  [](int a, QString msg){  qDebug()&amp;lt;&amp;lt;a&amp;lt;&amp;lt;msg;  }  );   // Lambda 表达式使用注意事项  // 如果b3是局部变量或者成员变量，lambda不要使用引用传值  QPushButton *b3 = new QPushButton(this);  b3-&amp;gt;setText(&amp;#34;Lambda&amp;#34;);  int a = 10, b = 100;  connect(&amp;amp;b2/*b3*/, &amp;amp;QPushButton::clicked,  [=](){ // 此处使用 &amp;amp; 传值会有问题  qDebug()&amp;lt;&amp;lt;a&amp;lt;&amp;lt;b;  }  ); </description>
    </item>
    
    <item>
      <title>Qt QProcess 使用</title>
      <link>https://874656645.github.io/posts/21-qprocess-%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 06 Dec 2021 12:34:27 +0800</pubDate>
      
      <guid>https://874656645.github.io/posts/21-qprocess-%E4%BD%BF%E7%94%A8/</guid>
      <description>  路径中有空格
m_process-&amp;gt;startDetached(strAppDir + &amp;quot;/ThreeDScreen.exe&amp;quot;, QStringList())
  杀死一个进程（注：-t 参数会将创建的子进程一起杀死）
QProcess::startDetached(&amp;quot;taskkill -t -f /IM iexplore.exe&amp;quot;);
  </description>
    </item>
    
    <item>
      <title>Qt QString 中文乱码</title>
      <link>https://874656645.github.io/posts/20-qstring-%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/</link>
      <pubDate>Mon, 06 Dec 2021 11:34:27 +0800</pubDate>
      
      <guid>https://874656645.github.io/posts/20-qstring-%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/</guid>
      <description>QString使用的是UTF-8编码 从字符常量中获取中文  QString msg = QString::fromLocal8Bit(&amp;quot;This is a debug message at 中文&amp;quot;);
以QString做为形参变量传递  qDebug(msg.toUtf8());
QString与操作系统间读写，会自动将UTF-8与操作系统的编码做转换（比如日志系统）  void QtLog::WriteLine(const QString &amp;amp;logFileName, const QString &amp;amp;logMsg) {  QFile file(logFileName);  file.open(QIODevice::WriteOnly | QIODevice::Append);  QTextStream text_stream(&amp;amp;file);  text_stream &amp;lt;&amp;lt; logMsg &amp;lt;&amp;lt; &amp;#34;\r\n&amp;#34;;  file.flush();  file.close(); }  QString strAppDir = QCoreApplication::applicationDirPath(); // 不用转码  QString message, text, fileName = strAppDir + &amp;#34;/Log/&amp;#34;;  QDir dir(fileName);  if (!dir.exists())  {  // 注：不能创建两级文件夹  bool ismkdir = dir.</description>
    </item>
    
  </channel>
</rss>
