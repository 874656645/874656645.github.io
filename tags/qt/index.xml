<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Qt on Slow is Smooth and Smooth is Fast</title>
    <link>https://874656645.github.io/tags/qt/</link>
    <description>Recent content in Qt on Slow is Smooth and Smooth is Fast</description>
    <image>
      <url>https://874656645.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://874656645.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 18 Jul 2022 22:17:00 +0800</lastBuildDate><atom:link href="https://874656645.github.io/tags/qt/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Qt 多线程</title>
      <link>https://874656645.github.io/posts/212-qt-%E5%A4%9A%E7%BA%BF%E7%A8%8B/</link>
      <pubDate>Mon, 18 Jul 2022 22:17:00 +0800</pubDate>
      
      <guid>https://874656645.github.io/posts/212-qt-%E5%A4%9A%E7%BA%BF%E7%A8%8B/</guid>
      <description>一、注意事项：  线程处理类继承于 QObject 线程处理类对象不能有父对象 处理完成后向外发信号 即使 QThread 线程内部的处理对象运行结束了，QThread 线程对象也不会自动释放，需要手动 quit() + wait() 线程处理类对象创建成功后，需要通过 moveToThread() 函数移动到 QThread 对象中 需要通过其他线程发信号来启动另外线程中的处理类对象的处理函数 子线程中不要操作图形界面  二、connect 第五个参数的作用 指定信号和槽的连接方式：自动连接、直接连接、队列连接，多线程时才有意义，默认为 Qt::AutoConnection。
 Qt::AutoConnection（自动连接）：多线程时是 Qt::QueuedConnection（队列连接），单线程时是 Qt::DirectConnection（直接连接） Qt::QueuedConnection（队列连接）：槽函数所在线程和信号接收者所在线程相同 Qt::DirectConnection（直接连接）：槽函数所在线程和信号发送者所在线程相同  三、代码示例   线程处理类
class MyThreadPro : public QObject {  Q_OBJECT public:  explicit MyThreadPro(QObject *parent = nullptr);  // 后台处理函数  void startProcessing();  // 是否结束标识位  void setFlag(bool b = false);  signals:  // 向其他线程发送信号  void myTimeout();  private:  bool stopRunning; };   主窗口类</description>
    </item>
    
    <item>
      <title>Qt UDP</title>
      <link>https://874656645.github.io/posts/209-qt-udp/</link>
      <pubDate>Fri, 15 Jul 2022 21:44:52 +0800</pubDate>
      
      <guid>https://874656645.github.io/posts/209-qt-udp/</guid>
      <description>一、总结  UDP 就像写信，可能会丢包 Linux UDP 通信过程  Qt UDP 通信过程  支持多路组播：D 类地址
 局域网广播 IP： 255.255.255.255  二、每个实例都可以是服务端  只需要一个套接字，绑定到端口号即可   setWindowTitle(QString(&amp;#34;服务器端口为：%1&amp;#34;).arg(port));   udpSocket = new QUdpSocket(this);  // 只需要绑定端口号，不用开启监听  udpSocket-&amp;gt;bind(port);  connect(udpSocket, &amp;amp;QUdpSocket::readyRead,[=](){  char buf[1024] = {0};  QHostAddress clientAddr; // 发送方 IP  quint16 clientPort; // 发送方 Port  qint64 len = udpSocket-&amp;gt;readDatagram(buf, sizeof (buf), &amp;amp;clientAddr, &amp;amp;clientPort);  qDebug() &amp;lt;&amp;lt; &amp;#34;接收到&amp;#34; &amp;lt;&amp;lt; len;  if(len &amp;gt; 0){  QString str = QString(&amp;#34;[%1:%2] %3&amp;#34;).</description>
    </item>
    
    <item>
      <title>Qt TCP</title>
      <link>https://874656645.github.io/posts/208-qt-tcp/</link>
      <pubDate>Fri, 15 Jul 2022 21:13:10 +0800</pubDate>
      
      <guid>https://874656645.github.io/posts/208-qt-tcp/</guid>
      <description>一、总结  TCP 就像打电话，安全，不会丢包 Linux TCP 通信  Qt TCP 通信   二、服务器端  TCP 服务器端有两个套接字，一个是监听套接字，一个是通信套接字   tcpServer = nullptr; // 服务监听套接字  tcpSocket = nullptr; // 通信套接字   // 创建tcp服务监听套接字  tcpServer = new QTcpServer(this);  // tcp服务开启监听（bind端口号并开启监听）  tcpServer-&amp;gt;listen(QHostAddress::Any, 8008);  // 绑定连接成功信号  connect(tcpServer, &amp;amp;QTcpServer::newConnection,[=](){  // 获取通信套接字  tcpSocket = tcpServer-&amp;gt;nextPendingConnection();  // 获取客户端 IP 和 端口  QString ip = tcpSocket-&amp;gt;peerAddress().toString();  quint16 port = tcpSocket-&amp;gt;peerPort();  QString msg = QString(&amp;#34;[%1:%2] 连接成功&amp;#34;).</description>
    </item>
    
    <item>
      <title>Qt CMake</title>
      <link>https://874656645.github.io/posts/207-qt-cmake/</link>
      <pubDate>Fri, 15 Jul 2022 16:10:27 +0800</pubDate>
      
      <guid>https://874656645.github.io/posts/207-qt-cmake/</guid>
      <description>cmake_minimum_required(VERSION 3.5)project(07_TCP LANGUAGES CXX)# 将编译目录包含到Include目录 set(CMAKE_INCLUDE_CURRENT_DIR ON)set(CMAKE_AUTOUIC ON)set(CMAKE_AUTOMOC ON)set(CMAKE_AUTORCC ON)# 根据 Qt 版本的环境变量，设置使用的 Qt 版本 set(CMAKE_PREFIX_PATH $ENV{QTDIR5141_64})set(CMAKE_CXX_STANDARD 11)set(CMAKE_CXX_STANDARD_REQUIRED ON)# QtCreator supports the following variables for Android, which are identical to qmake Android variables. # Check http://doc.qt.io/qt-5/deployment-android.html for more information. # They need to be set before the find_package(Qt5 ...) call. #if(ANDROID) # set(ANDROID_PACKAGE_SOURCE_DIR &amp;#34;${CMAKE_CURRENT_SOURCE_DIR}/android&amp;#34;) # if (ANDROID_ABI STREQUAL &amp;#34;armeabi-v7a&amp;#34;) # set(ANDROID_EXTRA_LIBS # ${CMAKE_CURRENT_SOURCE_DIR}/path/to/libcrypto.so # ${CMAKE_CURRENT_SOURCE_DIR}/path/to/libssl.so) # endif() #endif() # 工程中会用到的Qt模块 find_package(Qt5 COMPONENTS Widgets Network REQUIRED)if(ANDROID) add_library(07_TCP SHARED  main.</description>
    </item>
    
    <item>
      <title>Qt 信号和槽</title>
      <link>https://874656645.github.io/posts/193-qt-%E4%BF%A1%E5%8F%B7%E5%92%8C%E6%A7%BD/</link>
      <pubDate>Tue, 14 Jun 2022 09:45:15 +0800</pubDate>
      
      <guid>https://874656645.github.io/posts/193-qt-%E4%BF%A1%E5%8F%B7%E5%92%8C%E6%A7%BD/</guid>
      <description> 信号函数没有返回值，且只是一个函数声明，必须有 signals: 声明 槽函数的函数标签必须和信号函数相同（相同的返回值类型和形参列表） Qt5 后成员函数也可作为 slots，可以不用 slots: 声明 slots: 声明前要添加访问权限修饰符 信号函数和槽函数其实都可以被重载   // signal 和 slots 都可以重载  // Qt5的方式  void(subWindow::*pFun1)() = &amp;amp;subWindow::showMainWindow;  void(MainWindow::*pSlot1)() = &amp;amp;MainWindow::onShowMainWindow;  connect(&amp;amp;sw, pFun1, this, pSlot1);  void(subWindow::*pFun2)(int,QString) = &amp;amp;subWindow::showMainWindow;  void(MainWindow::*pSlot2)(int,QString) = &amp;amp;MainWindow::onShowMainWindow;  connect(&amp;amp;sw, pFun2, this, pSlot2);   // Qt4的方式  // 1. SIGNAL、SLOT宏会把信号和槽转成字符串，所以就不能进行编译期错误检查  // 2. 槽函数前面必须有 slots 标签，否则无法识别为槽函数  connect(&amp;amp;sw, SIGNAL(showMainWindow()), this, SLOT(onShowMainWindow()));  connect(&amp;amp;sw, SIGNAL(showMainWindow(int,QString))  , this, SLOT(onShowMainWindow(int,QString)));   // Lambda 表达式  void(subWindow::*pFun1)() = &amp;amp;subWindow::showMainWindow;  connect(&amp;amp;sw, pFun1,  [](){  qDebug()&amp;lt;&amp;lt;&amp;#34;没有参数的信号&amp;#34;;  }  );  void(subWindow::*pFun2)(int,QString) = &amp;amp;subWindow::showMainWindow;  connect(&amp;amp;sw, pFun2,  [](int a, QString msg){  qDebug()&amp;lt;&amp;lt;a&amp;lt;&amp;lt;msg;  }  );   // Lambda 表达式使用注意事项  // 如果b3是局部变量或者成员变量，lambda不要使用引用传值  QPushButton *b3 = new QPushButton(this);  b3-&amp;gt;setText(&amp;#34;Lambda&amp;#34;);  int a = 10, b = 100;  connect(&amp;amp;b2/*b3*/, &amp;amp;QPushButton::clicked,  [=](){ // 此处使用 &amp;amp; 传值会有问题  qDebug()&amp;lt;&amp;lt;a&amp;lt;&amp;lt;b;  }  ); </description>
    </item>
    
    <item>
      <title>Qt QProcess 使用</title>
      <link>https://874656645.github.io/posts/21-qprocess-%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 06 Dec 2021 12:34:27 +0800</pubDate>
      
      <guid>https://874656645.github.io/posts/21-qprocess-%E4%BD%BF%E7%94%A8/</guid>
      <description>  路径中有空格
m_process-&amp;gt;startDetached(strAppDir + &amp;quot;/ThreeDScreen.exe&amp;quot;, QStringList())
  杀死一个进程（注：-t 参数会将创建的子进程一起杀死）
QProcess::startDetached(&amp;quot;taskkill -t -f /IM iexplore.exe&amp;quot;);
  </description>
    </item>
    
    <item>
      <title>Qt QString 中文乱码</title>
      <link>https://874656645.github.io/posts/20-qstring-%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/</link>
      <pubDate>Mon, 06 Dec 2021 11:34:27 +0800</pubDate>
      
      <guid>https://874656645.github.io/posts/20-qstring-%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/</guid>
      <description>QString使用的是UTF-8编码 从字符常量中获取中文  QString msg = QString::fromLocal8Bit(&amp;quot;This is a debug message at 中文&amp;quot;);
以QString做为形参变量传递  qDebug(msg.toUtf8());
QString与操作系统间读写，会自动将UTF-8与操作系统的编码做转换（比如日志系统）  void QtLog::WriteLine(const QString &amp;amp;logFileName, const QString &amp;amp;logMsg) {  QFile file(logFileName);  file.open(QIODevice::WriteOnly | QIODevice::Append);  QTextStream text_stream(&amp;amp;file);  text_stream &amp;lt;&amp;lt; logMsg &amp;lt;&amp;lt; &amp;#34;\r\n&amp;#34;;  file.flush();  file.close(); }  QString strAppDir = QCoreApplication::applicationDirPath(); // 不用转码  QString message, text, fileName = strAppDir + &amp;#34;/Log/&amp;#34;;  QDir dir(fileName);  if (!dir.exists())  {  // 注：不能创建两级文件夹  bool ismkdir = dir.</description>
    </item>
    
  </channel>
</rss>
