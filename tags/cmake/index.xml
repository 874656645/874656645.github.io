<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>CMake on Slow is Smooth and Smooth is Fast</title>
    <link>https://874656645.github.io/rick/tags/cmake/</link>
    <description>Recent content in CMake on Slow is Smooth and Smooth is Fast</description>
    <image>
      <url>https://874656645.github.io/rick/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://874656645.github.io/rick/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 27 Feb 2022 15:56:29 +0800</lastBuildDate><atom:link href="https://874656645.github.io/rick/tags/cmake/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CMake 安装和测试</title>
      <link>https://874656645.github.io/rick/posts/138-cmake-%E5%AE%89%E8%A3%85%E5%92%8C%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Sun, 27 Feb 2022 15:56:29 +0800</pubDate>
      
      <guid>https://874656645.github.io/rick/posts/138-cmake-%E5%AE%89%E8%A3%85%E5%92%8C%E6%B5%8B%E8%AF%95/</guid>
      <description>Install Rules 在库的 CMakeLists.txt 文件末尾添加 install
add_library(MathFunctions mysqrt.cxx)target_include_directories(MathFunctions INTERFACE ${CMAKE_CURRENT_SOURCE_DIR})install(TARGETS MathFunctions DESTINATION lib)install(FILES MathFunctions.h DESTINATION include)在顶层 CMakeLists.txt 的末尾添加
... ... ## 安装 install(TARGETS Tutorial DESTINATION bin)install(FILES &amp;#34;${PROJECT_BINARY_DIR}/TutorialConfig.h&amp;#34; DESTINATION include )Testing Support 在顶层 CMakeLists.txt 的末尾添加
... ... ## 测试 enable_testing()# does the application run add_test(NAME Runs COMMAND Tutorial 25)# does the usage message work? add_test(NAME Usage COMMAND Tutorial)# 设置校验信息 set_tests_properties(Usage PROPERTIES PASS_REGULAR_EXPRESSION &amp;#34;Usage:.*number&amp;#34; )# define a function to simplify adding tests function(do_test target arg result) add_test(NAME Comp${arg} COMMAND ${target} ${arg}) set_tests_properties(Comp${arg} PROPERTIES PASS_REGULAR_EXPRESSION ${result} )endfunction()# do a bunch of result based tests do_test(Tutorial 4 &amp;#34;4 is 2&amp;#34;)do_test(Tutorial 9 &amp;#34;9 is 3&amp;#34;)do_test(Tutorial 5 &amp;#34;5 is 2.</description>
    </item>
    
    <item>
      <title>CMake 添加依赖库和使用条件</title>
      <link>https://874656645.github.io/rick/posts/137-cmake-%E6%B7%BB%E5%8A%A0%E4%BE%9D%E8%B5%96%E5%BA%93%E5%92%8C%E4%BD%BF%E7%94%A8%E6%9D%A1%E4%BB%B6/</link>
      <pubDate>Sun, 27 Feb 2022 14:30:39 +0800</pubDate>
      
      <guid>https://874656645.github.io/rick/posts/137-cmake-%E6%B7%BB%E5%8A%A0%E4%BE%9D%E8%B5%96%E5%BA%93%E5%92%8C%E4%BD%BF%E7%94%A8%E6%9D%A1%E4%BB%B6/</guid>
      <description>添加依赖库和使用条件 CMakeLists.txt  注意编译选项、生成配置文件和条件编译三部分的顺序  # 设置CMake版本最低要求 cmake_minimum_required(VERSION 3.10)# 设置项目名称和版本 project(Tutorial VERSION 3.1)# 指定 C++ 标准 set(CMAKE_CXX_STANDARD 11)set(CMAKE_CXX_STANDARD_REQUIRED True)# 设置编译选项 option(USE_MYMATH &amp;#34;Use tutorial provided math implementation&amp;#34; ON)# 生成一个头文件，传递 CMake 的一些设置到源代码 configure_file(TutorialConfig.h.in TutorialConfig.h)# 添加 MathFunctions library # add_subdirectory(MathFunctions) if(USE_MYMATH) add_subdirectory(MathFunctions) list(APPEND EXTRA_LIBS MathFunctions) list(APPEND EXTRA_INCLUDES &amp;#34;${PROJECT_SOURCE_DIR}/MathFunctions&amp;#34;)endif()# 添加源码文件和生成的目标文件的名称 add_executable(Tutorial main.cpp)# target_link_libraries(Tutorial PUBLIC MathFunctions) target_link_libraries(Tutorial PUBLIC ${EXTRA_LIBS})# 添加头文件查找路径 # target_include_directories(Tutorial PUBLIC # &amp;#34;${PROJECT_BINARY_DIR}&amp;#34; # &amp;#34;${PROJECT_SOURCE_DIR}/MathFunctions&amp;#34; # ) target_include_directories(Tutorial PUBLIC &amp;#34;${PROJECT_BINARY_DIR}&amp;#34; ${EXTRA_INCLUDES} )子模块（库）的 CMakeLists.txt 文件 add_library(MathFunctions mysqrt.</description>
    </item>
    
    <item>
      <title>CMake 配置文件传递设置信息</title>
      <link>https://874656645.github.io/rick/posts/136-cmake-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BC%A0%E9%80%92%E8%AE%BE%E7%BD%AE%E4%BF%A1%E6%81%AF/</link>
      <pubDate>Sat, 26 Feb 2022 21:39:32 +0800</pubDate>
      
      <guid>https://874656645.github.io/rick/posts/136-cmake-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BC%A0%E9%80%92%E8%AE%BE%E7%BD%AE%E4%BF%A1%E6%81%AF/</guid>
      <description>CMakeList # 设置CMake版本最低要求 cmake_minimum_required(VERSION 3.10)# 设置项目名称和版本 project(Tutorial VERSION 2.0)# 指定 C++ 标准 set(CMAKE_CXX_STANDARD 11)set(CMAKE_CXX_STANDARD_REQUIRED True)# 生成一个头文件，传递 CMake 的一些设置到源代码 configue_file(TutorialConfig.h.in TutorialConfig.h)# 添加源码文件和生成的目标文件的名称 add_executable(Tutorial main.cpp)# 添加头文件查找路径 target_include_directories(Tutorial PUBLIC &amp;#34;$(PROJECT_BINARY_DIR)&amp;#34;)TutorialConfig.h.in // #define TUTORIAL_VERSION_MAJOR @Tutorial_VERSION_MAJOR@ #define TUTORIAL_VERSION_MINOR @Tutorial_VERSION_MINOR@ </description>
    </item>
    
    <item>
      <title>CMake 使用</title>
      <link>https://874656645.github.io/rick/posts/135-cmake-%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sat, 26 Feb 2022 20:03:44 +0800</pubDate>
      
      <guid>https://874656645.github.io/rick/posts/135-cmake-%E4%BD%BF%E7%94%A8/</guid>
      <description>一、CMakeLists.txt 文件示例 # 设置CMake版本最低要求 cmake_minimum_required(VERSION 3.10)# 设置项目名称和版本 project(Tutorial VERSION 1.0)# 添加源码文件和生成的目标文件的名称 add_executable(Tutorial main.cpp)二、CMake 相关命令  cmake .. 含有 CMakeLists.txt 文件的路径，根据 CMakeLists.txt 文件构建对应的工程； cmake .. -DUSE_MYMATH=OFF 将 CMake 编译选项 USE_MYMATH 设置为关闭状态，并构建工程 cmake .. -DCMAKE_BUILD_TYPE=Release 在Linux中设定 Release 版本 cmake --install . --prefix &amp;quot;E:/VSCode-Projects/CMake&amp;quot; 指定安装路径，在 Windows 中，如果不指定 --prefix 参数，64位默认会安装到 C:\Program Files  Windows  cmake --build . 在当前目录编译成二进制文件，默认是 Debug cmake --build . --config Release 编译 Release ctest -C Release -VV 参数 -VV 输出详细信息，可不加。对于多配置生成器(例如Visual Studio)，配置类型必须用 -C &amp;lt;mode&amp;gt; 标志来指定  Linux  make 进行编译 ctest -N 和 ctest -VV 测试  </description>
    </item>
    
  </channel>
</rss>
