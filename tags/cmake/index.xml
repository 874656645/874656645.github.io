<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>CMake on Slow is Smooth and Smooth is Fast</title>
    <link>https://874656645.github.io/tags/cmake/</link>
    <description>Recent content in CMake on Slow is Smooth and Smooth is Fast</description>
    <image>
      <url>https://874656645.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://874656645.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 18 Jul 2022 22:17:00 +0800</lastBuildDate><atom:link href="https://874656645.github.io/tags/cmake/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Qt 多线程</title>
      <link>https://874656645.github.io/posts/212-qt-%E5%A4%9A%E7%BA%BF%E7%A8%8B/</link>
      <pubDate>Mon, 18 Jul 2022 22:17:00 +0800</pubDate>
      
      <guid>https://874656645.github.io/posts/212-qt-%E5%A4%9A%E7%BA%BF%E7%A8%8B/</guid>
      <description>一、注意事项：  线程处理类继承于 QObject 线程处理类对象不能有父对象 处理完成后向外发信号 即使 QThread 线程内部的处理对象运行结束了，QThread 线程对象也不会自动释放，需要手动 quit() + wait() 线程处理类对象创建成功后，需要通过 moveToThread() 函数移动到 QThread 对象中 需要通过其他线程发信号来启动另外线程中的处理类对象的处理函数 子线程中不要操作图形界面  二、connect 第五个参数的作用 指定信号和槽的连接方式：自动连接、直接连接、队列连接，多线程时才有意义，默认为 Qt::AutoConnection。
 Qt::AutoConnection（自动连接）：多线程时是 Qt::QueuedConnection（队列连接），单线程时是 Qt::DirectConnection（直接连接） Qt::QueuedConnection（队列连接）：槽函数所在线程和信号接收者所在线程相同 Qt::DirectConnection（直接连接）：槽函数所在线程和信号发送者所在线程相同  三、代码示例   线程处理类
class MyThreadPro : public QObject { Q_OBJECT public: explicit MyThreadPro(QObject *parent = nullptr); // 后台处理函数  void startProcessing(); // 是否结束标识位  void setFlag(bool b = false); signals: // 向其他线程发送信号  void myTimeout(); private: bool stopRunning; };   主窗口类</description>
    </item>
    
    <item>
      <title>Qt UDP</title>
      <link>https://874656645.github.io/posts/209-qt-udp/</link>
      <pubDate>Fri, 15 Jul 2022 21:44:52 +0800</pubDate>
      
      <guid>https://874656645.github.io/posts/209-qt-udp/</guid>
      <description>一、总结  UDP 就像写信，可能会丢包 Linux UDP 通信过程  Qt UDP 通信过程  支持多路组播：D 类地址
 局域网广播 IP： 255.255.255.255  二、每个实例都可以是服务端  只需要一个套接字，绑定到端口号即可  setWindowTitle(QString(&amp;#34;服务器端口为：%1&amp;#34;).arg(port)); udpSocket = new QUdpSocket(this); // 只需要绑定端口号，不用开启监听  udpSocket-&amp;gt;bind(port); connect(udpSocket, &amp;amp;QUdpSocket::readyRead,[=](){ char buf[1024] = {0}; QHostAddress clientAddr; // 发送方 IP  quint16 clientPort; // 发送方 Port  qint64 len = udpSocket-&amp;gt;readDatagram(buf, sizeof (buf), &amp;amp;clientAddr, &amp;amp;clientPort); qDebug() &amp;lt;&amp;lt; &amp;#34;接收到&amp;#34; &amp;lt;&amp;lt; len; if(len &amp;gt; 0){ QString str = QString(&amp;#34;[%1:%2] %3&amp;#34;).</description>
    </item>
    
    <item>
      <title>Qt TCP</title>
      <link>https://874656645.github.io/posts/208-qt-tcp/</link>
      <pubDate>Fri, 15 Jul 2022 21:13:10 +0800</pubDate>
      
      <guid>https://874656645.github.io/posts/208-qt-tcp/</guid>
      <description>一、总结  TCP 就像打电话，安全，不会丢包 Linux TCP 通信  Qt TCP 通信   二、服务器端  TCP 服务器端有两个套接字，一个是监听套接字，一个是通信套接字  tcpServer = nullptr; // 服务监听套接字  tcpSocket = nullptr; // 通信套接字  // 创建tcp服务监听套接字  tcpServer = new QTcpServer(this); // tcp服务开启监听（bind端口号并开启监听）  tcpServer-&amp;gt;listen(QHostAddress::Any, 8008); // 绑定连接成功信号  connect(tcpServer, &amp;amp;QTcpServer::newConnection,[=](){ // 获取通信套接字  tcpSocket = tcpServer-&amp;gt;nextPendingConnection(); // 获取客户端 IP 和 端口  QString ip = tcpSocket-&amp;gt;peerAddress().toString(); quint16 port = tcpSocket-&amp;gt;peerPort(); QString msg = QString(&amp;#34;[%1:%2] 连接成功&amp;#34;).</description>
    </item>
    
    <item>
      <title>Qt CMake</title>
      <link>https://874656645.github.io/posts/207-qt-cmake/</link>
      <pubDate>Fri, 15 Jul 2022 16:10:27 +0800</pubDate>
      
      <guid>https://874656645.github.io/posts/207-qt-cmake/</guid>
      <description>cmake_minimum_required(VERSION 3.5)project(07_TCP LANGUAGES CXX)# 将编译目录包含到Include目录 set(CMAKE_INCLUDE_CURRENT_DIR ON)set(CMAKE_AUTOUIC ON)set(CMAKE_AUTOMOC ON)set(CMAKE_AUTORCC ON)# 根据 Qt 版本的环境变量，设置使用的 Qt 版本 set(CMAKE_PREFIX_PATH $ENV{QTDIR5141_64})set(CMAKE_CXX_STANDARD 11)set(CMAKE_CXX_STANDARD_REQUIRED ON)# QtCreator supports the following variables for Android, which are identical to qmake Android variables. # Check http://doc.qt.io/qt-5/deployment-android.html for more information. # They need to be set before the find_package(Qt5 ...) call. #if(ANDROID) # set(ANDROID_PACKAGE_SOURCE_DIR &amp;#34;${CMAKE_CURRENT_SOURCE_DIR}/android&amp;#34;) # if (ANDROID_ABI STREQUAL &amp;#34;armeabi-v7a&amp;#34;) # set(ANDROID_EXTRA_LIBS # ${CMAKE_CURRENT_SOURCE_DIR}/path/to/libcrypto.so # ${CMAKE_CURRENT_SOURCE_DIR}/path/to/libssl.so) # endif() #endif() # 工程中会用到的Qt模块 find_package(Qt5 COMPONENTS Widgets Network REQUIRED)if(ANDROID) add_library(07_TCP SHARED main.</description>
    </item>
    
    <item>
      <title>CMake 打包 Debug 和 Release</title>
      <link>https://874656645.github.io/posts/146-cmake-%E6%89%93%E5%8C%85-debug-%E5%92%8C-release/</link>
      <pubDate>Sun, 06 Mar 2022 14:41:05 +0800</pubDate>
      
      <guid>https://874656645.github.io/posts/146-cmake-%E6%89%93%E5%8C%85-debug-%E5%92%8C-release/</guid>
      <description>注意：这个对于单配置生成器是有效的，对于多配置生成器(例如Visual Studio)是无效的。因此在 Windows 平台，通过 MSYS 环境进行演示。
默认情况下（Linux平台），CMake 的一个构建目录(build dir)只包含一个配置，可以是 Debug、Release、MinSizeRel 或 RelWithDebInfo。但是，可以通过设置 CPack 来绑定多个构建目录，并构造一个包含同一项目的多个配置的发行包。
首先，我们希望确保 Debug 和 Release 构建对将要安装的可执行文件和库使用不同的名称。让我们使用 d 作为 Debug 可执行文件和库的后缀。在顶层 CMakeLists.txt 的开始部分添加 CMAKE_DEBUG_POSTFIX
# 设置项目名称和版本 project(Tutorial VERSION 3.1)# 设置 CMAKE_DEBUG_POSTFIX，指定后缀为 d set(CMAKE_DEBUG_POSTFIX d)然后在 Tutorial 可执行文件上添加属性 DEBUG_POSTFIX：
# 添加源码文件和生成的目标文件的名称 add_executable(Tutorial main.cpp)# And the DEBUG_POSTFIX property on the tutorial executable set_target_properties(Tutorial PROPERTIES DEBUG_POSTFIX ${CMAKE_DEBUG_POSTFIX})为 MathFunctions 库添加版本号信息，在 Mathfunctions/CMakelists.txt 中，设置 VERSION 和 SOVERSION 属性：
# add the library that runs add_library(MathFunctions MathFunctions.</description>
    </item>
    
    <item>
      <title>CMake 添加导出配置</title>
      <link>https://874656645.github.io/posts/145-cmake-%E6%B7%BB%E5%8A%A0%E5%AF%BC%E5%87%BA%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Sun, 06 Mar 2022 10:37:40 +0800</pubDate>
      
      <guid>https://874656645.github.io/posts/145-cmake-%E6%B7%BB%E5%8A%A0%E5%AF%BC%E5%87%BA%E9%85%8D%E7%BD%AE/</guid>
      <description>在安装和测试过程中，我们增加了 CMake 安装库文件和项目依赖的头文件(bin、lib、include)的能力。在打包可安装程序的过程中，我们增加了打包这些信息的能力，这样它就可以分发给其他人使用
接下来是如何添加必要的信息，以便其他 CMake 项目可以使用我们的项目，无论是在构建目录、本地安装还是打包的时候
第一步是更新我们的 install(TARGETS) 命令，不仅指定 DESTINATION，还指定 EXPORT。EXPORT 关键字生成一个 CMake 文件，其中包含从安装树导入安装命令中列出的所有目标的代码。
修改 MathFunctions/CMakeLists.txt 文件代码：
# install rules set(installable_libs MathFunctions tutorial_compiler_flags)if(TARGET SqrtLibrary) list(APPEND installable_libs SqrtLibrary)endif()install(TARGETS ${installable_libs} EXPORT MathFunctionsTargets DESTINATION lib)install(FILES MathFunctions.h DESTINATION include)第二步我们还需要显式地安装生成的 MathFunctionsTargets.cmake 文件。在顶层的 CMakeLists.txt 文件底部添加如下代码：
install(EXPORT MathFunctionsTargets FILE MathFunctionsTargets.cmake DESTINATION lib/cmake/MathFunctions )此时构建会有下面的错误：
这是因为在生成导出信息期间，它将导出内在绑定到当前计算机项目的路径，在其他计算机上路径无效。
第三步更新 MathFunctions/CMakeLists.txt 中的 target_include_directories() 用来设置在 build 时和在 install/package 时需要使用不同的 INTERFACE locations。
# 将当前二进制目录添加到包含目录列表中 target_include_directories(MathFunctions # INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}  INTERFACE $&amp;lt;BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}&amp;gt; $&amp;lt;INSTALL_INTERFACE:include&amp;gt; )第四步我们还需要生成一个 MathFunctionsConfig.cmake，这样 CMake 的 find_package() 命令就可以找到我们的项目。在顶层的项目目录添加 Config.</description>
    </item>
    
    <item>
      <title>CMake 添加生成器表达式</title>
      <link>https://874656645.github.io/posts/144-cmake-%E6%B7%BB%E5%8A%A0%E7%94%9F%E6%88%90%E5%99%A8%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Sun, 06 Mar 2022 07:42:05 +0800</pubDate>
      
      <guid>https://874656645.github.io/posts/144-cmake-%E6%B7%BB%E5%8A%A0%E7%94%9F%E6%88%90%E5%99%A8%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>target_compile_features target_compile_options COMPILE_LANG_AND_ID BUILD_INTERFACE  生成器表达式(Generator expressions)允许在许多目标属性的上下文中使用，比如 LINK LIBRARIES、INCLUDE DIRECTORIES、COMPILE DEFINITIONS 等。当使用命令来填充这些属性时，它们也可以被使用，例如 target_link_libraries()、target_include_directories()、target_compile_definitions() 等。
生成器表达式可以用于启用条件链接、编译时使用的条件定义、条件包含目录等。这些条件可能基于构建配置、目标属性、平台信息或任何其他可查询的信息。
有不同类型的生成器表达式，包括逻辑表达式、信息表达式和输出表达式。
逻辑表达式用于创建条件输出。基本的表达式是 0 和 1 表达式。
生成器表达式的一个常见用法是有条件地添加编译器标志，比如那些用于语言级别或警告的标志。一个很好的模式是将该信息关联到一个 INTERFACE 目标，从而允许该信息传播。让我们先构造一个接口目标，并指定所需的 c++ 标准 11，而不是使用 CMAKE CXX 标准。
# 指定 C++ 标准 # set(CMAKE_CXX_STANDARD 11) # set(CMAKE_CXX_STANDARD_REQUIRED True) # 将上面的代码替换为 add_library(tutorial_compiler_flags INTERFACE)target_compile_features(tutorial_compiler_flags INTERFACE cxx_std_11)接下来，我们为项目添加所需的编译器警告标志。由于警告标志因编译器的不同而不同，我们使用 COMPILE_LANG_AND_ID 生成器表达式来控制给定语言和一组编译器 ID 要应用哪些标志（注：将要使用的生成器表达式是在 3.15 中引入的，所以要更新 cmake_minimum_required 的版本为 3.15），如下所示：
set(gcc_like_cxx &amp;#34;$&amp;lt;COMPILE_LANG_AND_ID:CXX,ARMClang,AppleClang,Clang,GNU,LCC&amp;gt;&amp;#34;)set(msvc_cxx &amp;#34;$&amp;lt;COMPILE_LANG_AND_ID:CXX,MSVC&amp;gt;&amp;#34;)target_compile_options(tutorial_compiler_flags INTERFACE &amp;#34;$&amp;lt;${gcc_like_cxx}:$&amp;lt;BUILD_INTERFACE:-Wall;-Wextra;-Wshadow;-Wformat=2;-Wunused&amp;gt;&amp;gt;&amp;#34; &amp;#34;$&amp;lt;${msvc_cxx}:$&amp;lt;BUILD_INTERFACE:-W3&amp;gt;&amp;gt;&amp;#34; )我们看到警告标志被封装在一个 BUILD_INTERFACE 条件中。这样做是为了让我们已安装项目的使用者不会继承我们的警告标志。
修改 Mathfunctions/cmakelists.txt，以便所有编译目标都有一个 target_link_libraries() 调用我们设置的编译条件标识 tutorial_compiler_flags。</description>
    </item>
    
    <item>
      <title>CMake 静态库和动态库混合使用</title>
      <link>https://874656645.github.io/posts/143-cmake-%E9%9D%99%E6%80%81%E5%BA%93%E5%92%8C%E5%8A%A8%E6%80%81%E5%BA%93%E6%B7%B7%E5%90%88%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sat, 05 Mar 2022 19:28:43 +0800</pubDate>
      
      <guid>https://874656645.github.io/posts/143-cmake-%E9%9D%99%E6%80%81%E5%BA%93%E5%92%8C%E5%8A%A8%E6%80%81%E5%BA%93%E6%B7%B7%E5%90%88%E4%BD%BF%E7%94%A8/</guid>
      <description>将原来的 静态库 MathFunctions拆分为动态库 MathFunctions.dll 和静态库 SqrtLibrary.lib 两个库。MathFunctions.dll 动态库会使用 SqrtLibrary.lib 静态库。 BUILD_SHARED_LIBS  在顶层的 CMakeLists.txt 文件中添加 BUILD_SHARED_LIBS，如果这个标记存在且为真，则将导致所有库都被构建为共享库，除非该库被显式地设置为静态库。这个变量通常作为 option() 添加到项目中，以便项目的每个用户可以决定他们是要使用共享库还是静态库构建项目。
顶层的 CMakeLists.txt 文件修改如下：
# 设置CMake版本最低要求 cmake_minimum_required(VERSION 3.10)# 设置项目名称和版本 project(Tutorial VERSION 3.2)# 指定 C++ 标准 set(CMAKE_CXX_STANDARD 11)set(CMAKE_CXX_STANDARD_REQUIRED True)# control where the static and shared libraries are built so that on windows # we don&amp;#39;t need to tinker with the path to run the executable # 指定静态库和动态库的生成路径 set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY &amp;#34;${PROJECT_BINARY_DIR}&amp;#34;)set(CMAKE_LIBRARY_OUTPUT_DIRECTORY &amp;#34;${PROJECT_BINARY_DIR}&amp;#34;)set(CMAKE_RUNTIME_OUTPUT_DIRECTORY &amp;#34;${PROJECT_BINARY_DIR}&amp;#34;)# 生成共享库选项 option(BUILD_SHARED_LIBS &amp;#34;Build using shared libraries&amp;#34; ON)# 生成一个头文件，传递 CMake 的一些设置到源代码 configure_file(TutorialConfig.</description>
    </item>
    
    <item>
      <title>CMake 添加对测试仪表板的支持</title>
      <link>https://874656645.github.io/posts/142-cmake-%E6%B7%BB%E5%8A%A0%E5%AF%B9%E6%B5%8B%E8%AF%95%E4%BB%AA%E8%A1%A8%E6%9D%BF%E7%9A%84%E6%94%AF%E6%8C%81/</link>
      <pubDate>Thu, 03 Mar 2022 20:12:47 +0800</pubDate>
      
      <guid>https://874656645.github.io/posts/142-cmake-%E6%B7%BB%E5%8A%A0%E5%AF%B9%E6%B5%8B%E8%AF%95%E4%BB%AA%E8%A1%A8%E6%9D%BF%E7%9A%84%E6%94%AF%E6%8C%81/</guid>
      <description>向仪表板提交测试结果 1. 修改最上层的 CMakeLists.txt 文件 将 enable_testing() 替换为 include(CTest)，CTest 模块会自动调用 enable_testing()
# 设置CMake版本最低要求 cmake_minimum_required(VERSION 3.10)# 设置项目名称和版本 project(Tutorial VERSION 3.1)# 指定 C++ 标准 set(CMAKE_CXX_STANDARD 11)set(CMAKE_CXX_STANDARD_REQUIRED True)# 设置编译选项 option(USE_MYMATH &amp;#34;Use tutorial provided math implementation&amp;#34; ON)# 生成一个头文件，传递 CMake 的一些设置到源代码 configure_file(TutorialConfig.h.in TutorialConfig.h)# 添加 MathFunctions library # add_subdirectory(MathFunctions) if(USE_MYMATH) add_subdirectory(MathFunctions) list(APPEND EXTRA_LIBS MathFunctions)endif()# 添加源码文件和生成的目标文件的名称 add_executable(Tutorial main.cpp)# target_link_libraries(Tutorial PUBLIC MathFunctions) target_link_libraries(Tutorial PUBLIC ${EXTRA_LIBS})# 添加头文件查找路径 # target_include_directories(Tutorial PUBLIC # &amp;#34;${PROJECT_BINARY_DIR}&amp;#34; # &amp;#34;${PROJECT_SOURCE_DIR}/MathFunctions&amp;#34; # ) target_include_directories(Tutorial PUBLIC &amp;#34;${PROJECT_BINARY_DIR}&amp;#34; )## 安装 install(TARGETS Tutorial DESTINATION bin)install(FILES &amp;#34;${PROJECT_BINARY_DIR}/TutorialConfig.</description>
    </item>
    
    <item>
      <title>CMake 打包可安装程序</title>
      <link>https://874656645.github.io/posts/141-cmake-%E6%89%93%E5%8C%85%E5%8F%AF%E5%AE%89%E8%A3%85%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Tue, 01 Mar 2022 21:45:45 +0800</pubDate>
      
      <guid>https://874656645.github.io/posts/141-cmake-%E6%89%93%E5%8C%85%E5%8F%AF%E5%AE%89%E8%A3%85%E7%A8%8B%E5%BA%8F/</guid>
      <description>可以在各种平台上提供二进制和源代码发行版。 InstallRequiredSystemLibraries CPack  一、需要在顶层 CMakeLists.txt 文件的底部添加几行代码 # 设置CMake版本最低要求 cmake_minimum_required(VERSION 3.10)# 设置项目名称和版本 project(Tutorial VERSION 3.1)# 指定 C++ 标准 set(CMAKE_CXX_STANDARD 11)set(CMAKE_CXX_STANDARD_REQUIRED True)# 设置编译选项 option(USE_MYMATH &amp;#34;Use tutorial provided math implementation&amp;#34; ON)# 生成一个头文件，传递 CMake 的一些设置到源代码 configure_file(TutorialConfig.h.in TutorialConfig.h)# 添加 MathFunctions library # add_subdirectory(MathFunctions) if(USE_MYMATH) add_subdirectory(MathFunctions) list(APPEND EXTRA_LIBS MathFunctions)endif()# 添加源码文件和生成的目标文件的名称 add_executable(Tutorial main.cpp)# target_link_libraries(Tutorial PUBLIC MathFunctions) target_link_libraries(Tutorial PUBLIC ${EXTRA_LIBS})# 添加头文件查找路径 # target_include_directories(Tutorial PUBLIC # &amp;#34;${PROJECT_BINARY_DIR}&amp;#34; # &amp;#34;${PROJECT_SOURCE_DIR}/MathFunctions&amp;#34; # ) target_include_directories(Tutorial PUBLIC &amp;#34;${PROJECT_BINARY_DIR}&amp;#34; )## 安装 install(TARGETS Tutorial DESTINATION bin)install(FILES &amp;#34;${PROJECT_BINARY_DIR}/TutorialConfig.</description>
    </item>
    
    <item>
      <title>CMake 添加自定义命令和生成文件</title>
      <link>https://874656645.github.io/posts/140-cmake-%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E5%91%BD%E4%BB%A4%E5%92%8C%E7%94%9F%E6%88%90%E6%96%87%E4%BB%B6/</link>
      <pubDate>Mon, 28 Feb 2022 21:13:27 +0800</pubDate>
      
      <guid>https://874656645.github.io/posts/140-cmake-%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E5%91%BD%E4%BB%A4%E5%92%8C%E7%94%9F%E6%88%90%E6%96%87%E4%BB%B6/</guid>
      <description>add_custom_command  MathFunctions 工程的 CMakeLists.txt # 添加可执行程序 MakeTable add_executable(MakeTable MakeTable.cxx)# 添加一个自定义命令，指定如何通过运行 MakeTable 生成 Table.h add_custom_command( OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/Table.h COMMAND MakeTable ${CMAKE_CURRENT_BINARY_DIR}/Table.h DEPENDS MakeTable )# 将生成的 Table.h 添加到库 MathFunctions 的源代码列表 add_library(MathFunctions mysqrt.cxx ${CMAKE_CURRENT_BINARY_DIR}/Table.h )# 将当前二进制目录添加到包含目录列表中，这样 Table.h 才能被 mysqrt.cxx 找到并包含 target_include_directories(MathFunctions INTERFACE ${CMAKE_CURRENT_SOURCE_DIR} PRIVATE ${CMAKE_CURRENT_BINARY_DIR} )install(TARGETS MathFunctions DESTINATION lib)install(FILES MathFunctions.h DESTINATION include)install(FILES ${CMAKE_CURRENT_BINARY_DIR}/Table.h DESTINATION include)生成的 Table.h 文件 double sqrtTable[] = { 0, 1, 1.41421, 1.73205, 2, 2.23607, 2.44949, 2.64575, 2.82843, 3, 0}; Tutorial.</description>
    </item>
    
    <item>
      <title>CMake 添加系统自检</title>
      <link>https://874656645.github.io/posts/139-cmake-%E6%B7%BB%E5%8A%A0%E7%B3%BB%E7%BB%9F%E8%87%AA%E6%A3%80/</link>
      <pubDate>Sun, 27 Feb 2022 21:46:10 +0800</pubDate>
      
      <guid>https://874656645.github.io/posts/139-cmake-%E6%B7%BB%E5%8A%A0%E7%B3%BB%E7%BB%9F%E8%87%AA%E6%A3%80/</guid>
      <description>CheckSymbolExists: 考虑在项目中添加一些代码，这些代码依赖于目标平台可能没有的特性 target_compile_definitions  add_library(MathFunctions mysqrt.cxx)target_include_directories(MathFunctions INTERFACE ${CMAKE_CURRENT_SOURCE_DIR})# does this system provide the log and exp functions? include(CheckSymbolExists)check_symbol_exists(log &amp;#34;math.h&amp;#34; HAVE_LOG)check_symbol_exists(exp &amp;#34;math.h&amp;#34; HAVE_EXP)# 如果平台中没有找到 log 和 exp，我们需要链接到 m 库 if(NOT (HAVE_LOG AND HAVE_EXP)) unset(HAVE_LOG CACHE) unset(HAVE_EXP CACHE) # 设置 m 库并再次尝试  set(CMAKE_REQUIRED_LIBRARIES &amp;#34;m&amp;#34;) check_symbol_exists(log &amp;#34;math.h&amp;#34; HAVE_LOG) check_symbol_exists(exp &amp;#34;math.h&amp;#34; HAVE_EXP) if(HAVE_LOG AND HAVE_EXP) target_link_libraries(MathFunctions PRIVATE m) endif()endif()# 如果可用，使用 target_compile_definitions() 指定 HAVE LOG 和 HAVE EXP 作为私有编译定义 # 在项目配置 预处理器定义中添加 HAVE LOG 和 HAVE EXP 两个宏定义 if(HAVE_LOG AND HAVE_EXP) target_compile_definitions(MathFunctions PRIVATE &amp;#34;HAVE_LOG&amp;#34; &amp;#34;HAVE_EXP&amp;#34;)endif()# install install(TARGETS MathFunctions DESTINATION lib)install(FILES MathFunctions.</description>
    </item>
    
    <item>
      <title>CMake 安装和测试</title>
      <link>https://874656645.github.io/posts/138-cmake-%E5%AE%89%E8%A3%85%E5%92%8C%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Sun, 27 Feb 2022 15:56:29 +0800</pubDate>
      
      <guid>https://874656645.github.io/posts/138-cmake-%E5%AE%89%E8%A3%85%E5%92%8C%E6%B5%8B%E8%AF%95/</guid>
      <description>Install Rules 在库的 CMakeLists.txt 文件末尾添加 install
add_library(MathFunctions mysqrt.cxx)target_include_directories(MathFunctions INTERFACE ${CMAKE_CURRENT_SOURCE_DIR})install(TARGETS MathFunctions DESTINATION lib)install(FILES MathFunctions.h DESTINATION include)在顶层 CMakeLists.txt 的末尾添加
... ... ## 安装 install(TARGETS Tutorial DESTINATION bin)install(FILES &amp;#34;${PROJECT_BINARY_DIR}/TutorialConfig.h&amp;#34; DESTINATION include )Testing Support 在顶层 CMakeLists.txt 的末尾添加
... ... ## 测试 enable_testing()# does the application run add_test(NAME Runs COMMAND Tutorial 25)# does the usage message work? add_test(NAME Usage COMMAND Tutorial)# 设置校验信息 set_tests_properties(Usage PROPERTIES PASS_REGULAR_EXPRESSION &amp;#34;Usage:.*number&amp;#34; )# define a function to simplify adding tests function(do_test target arg result) add_test(NAME Comp${arg} COMMAND ${target} ${arg}) set_tests_properties(Comp${arg} PROPERTIES PASS_REGULAR_EXPRESSION ${result} )endfunction()# do a bunch of result based tests do_test(Tutorial 4 &amp;#34;4 is 2&amp;#34;)do_test(Tutorial 9 &amp;#34;9 is 3&amp;#34;)do_test(Tutorial 5 &amp;#34;5 is 2.</description>
    </item>
    
    <item>
      <title>CMake 添加依赖库和使用条件</title>
      <link>https://874656645.github.io/posts/137-cmake-%E6%B7%BB%E5%8A%A0%E4%BE%9D%E8%B5%96%E5%BA%93%E5%92%8C%E4%BD%BF%E7%94%A8%E6%9D%A1%E4%BB%B6/</link>
      <pubDate>Sun, 27 Feb 2022 14:30:39 +0800</pubDate>
      
      <guid>https://874656645.github.io/posts/137-cmake-%E6%B7%BB%E5%8A%A0%E4%BE%9D%E8%B5%96%E5%BA%93%E5%92%8C%E4%BD%BF%E7%94%A8%E6%9D%A1%E4%BB%B6/</guid>
      <description>添加依赖库和使用条件 CMakeLists.txt  注意编译选项、生成配置文件和条件编译三部分的顺序  # 设置CMake版本最低要求 cmake_minimum_required(VERSION 3.10)# 设置项目名称和版本 project(Tutorial VERSION 3.1)# 指定 C++ 标准 set(CMAKE_CXX_STANDARD 11)set(CMAKE_CXX_STANDARD_REQUIRED True)# 设置编译选项 option(USE_MYMATH &amp;#34;Use tutorial provided math implementation&amp;#34; ON)# 生成一个头文件，传递 CMake 的一些设置到源代码 configure_file(TutorialConfig.h.in TutorialConfig.h)# 添加 MathFunctions library # add_subdirectory(MathFunctions) if(USE_MYMATH) add_subdirectory(MathFunctions) list(APPEND EXTRA_LIBS MathFunctions) list(APPEND EXTRA_INCLUDES &amp;#34;${PROJECT_SOURCE_DIR}/MathFunctions&amp;#34;)endif()# 添加源码文件和生成的目标文件的名称 add_executable(Tutorial main.cpp)# target_link_libraries(Tutorial PUBLIC MathFunctions) target_link_libraries(Tutorial PUBLIC ${EXTRA_LIBS})# 添加头文件查找路径 # target_include_directories(Tutorial PUBLIC # &amp;#34;${PROJECT_BINARY_DIR}&amp;#34; # &amp;#34;${PROJECT_SOURCE_DIR}/MathFunctions&amp;#34; # ) target_include_directories(Tutorial PUBLIC &amp;#34;${PROJECT_BINARY_DIR}&amp;#34; ${EXTRA_INCLUDES} )子模块（库）的 CMakeLists.txt 文件 add_library(MathFunctions mysqrt.</description>
    </item>
    
    <item>
      <title>CMake 配置文件传递设置信息</title>
      <link>https://874656645.github.io/posts/136-cmake-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BC%A0%E9%80%92%E8%AE%BE%E7%BD%AE%E4%BF%A1%E6%81%AF/</link>
      <pubDate>Sat, 26 Feb 2022 21:39:32 +0800</pubDate>
      
      <guid>https://874656645.github.io/posts/136-cmake-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BC%A0%E9%80%92%E8%AE%BE%E7%BD%AE%E4%BF%A1%E6%81%AF/</guid>
      <description>CMakeList # 设置CMake版本最低要求 cmake_minimum_required(VERSION 3.10)# 设置项目名称和版本 project(Tutorial VERSION 2.0)# 指定 C++ 标准 set(CMAKE_CXX_STANDARD 11)set(CMAKE_CXX_STANDARD_REQUIRED True)# 生成一个头文件，传递 CMake 的一些设置到源代码 configue_file(TutorialConfig.h.in TutorialConfig.h)# 添加源码文件和生成的目标文件的名称 add_executable(Tutorial main.cpp)# 添加头文件查找路径 target_include_directories(Tutorial PUBLIC &amp;#34;$(PROJECT_BINARY_DIR)&amp;#34;)TutorialConfig.h.in // #define TUTORIAL_VERSION_MAJOR @Tutorial_VERSION_MAJOR@ #define TUTORIAL_VERSION_MINOR @Tutorial_VERSION_MINOR@ </description>
    </item>
    
    <item>
      <title>CMake 使用</title>
      <link>https://874656645.github.io/posts/135-cmake-%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sat, 26 Feb 2022 20:03:44 +0800</pubDate>
      
      <guid>https://874656645.github.io/posts/135-cmake-%E4%BD%BF%E7%94%A8/</guid>
      <description>一、CMakeLists.txt 文件示例 # 设置CMake版本最低要求 cmake_minimum_required(VERSION 3.10)# 设置项目名称和版本 project(Tutorial VERSION 1.0)# 添加源码文件和生成的目标文件的名称 add_executable(Tutorial main.cpp)二、CMake 相关命令   cmake .. 含有 CMakeLists.txt 文件的路径，根据 CMakeLists.txt 文件构建对应的工程；
  cmake .. -DUSE_MYMATH=OFF 将 CMake 编译选项 USE_MYMATH 设置为关闭状态，并构建工程
  cmake .. -DCMAKE_BUILD_TYPE=Release 在Linux中设定 Release 版本，可设置的类型有 Debug、MinSizeRel、Release、RelWithDebInfo
  指定编译工具为 MSVC（不同的 CMake 版本，命令写法不同）：
cmake -G &amp;#34;Visual Studio 14 2015 Win64&amp;#34; cmake -G &amp;#34;Visual Studio 16 2019&amp;#34; -A x64 cmake -G &amp;#34;Visual Studio 16 2019&amp;#34; -A Win32   在 Windows 中使用 MinGW</description>
    </item>
    
  </channel>
</rss>
