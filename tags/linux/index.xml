<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Linux on Slow is Smooth and Smooth is Fast</title>
    <link>https://874656645.github.io/tags/linux/</link>
    <description>Recent content in Linux on Slow is Smooth and Smooth is Fast</description>
    <image>
      <url>https://874656645.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://874656645.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 20 Feb 2022 08:53:26 +0800</lastBuildDate><atom:link href="https://874656645.github.io/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>gdb 调试使用</title>
      <link>https://874656645.github.io/posts/127-gdb-%E8%B0%83%E8%AF%95%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sun, 20 Feb 2022 08:53:26 +0800</pubDate>
      
      <guid>https://874656645.github.io/posts/127-gdb-%E8%B0%83%E8%AF%95%E4%BD%BF%E7%94%A8/</guid>
      <description>一、生成带有调试信息的程序 gcc main.c -o app -g
二、启动调试  启动调试：gdb app 设置参数： set args
set args 123 abc 456 ddd 查看代码： list 或 l  查看代码显示行数：show listsize 设置代码显示行数：set listsize 20 查看当前文件：  l l 行号 l 函数名   查看非当前文件：  l 文件名:行号 l 文件名:函数名      三、断点相关  设置断点：  break 行号 b 行号 b 函数名 b 文件名:行号 b 文件名:函数名   查看断点：info break 或 i b 删除断点：  del 断点Num d Num d Num1 Num2 d Num1-Num10   设置断点无效：dis Num 断点生效：ena Num 设置条件断点：b 行号 if i == 10  四、调试相关  启动运行：  start - s run - r   退出 gdb 调试：quit - q 打印变量的值：p 变量名 打印变量的类型：ptype 变量名 向下单步调试：  next - n step - s   跳出函数体：finish 从循环中跳出（循环体中不能有断点）：until 设置变量的值：set var 变量名 = value 继续运行到下一个断点：continue - c 监视变量：display 变量名 查看所有的监视变量的信息：info(i) display 取消变量监视：undisplay Num  </description>
    </item>
    
    <item>
      <title>Makefile 使用</title>
      <link>https://874656645.github.io/posts/126-makefile-%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sat, 19 Feb 2022 16:36:47 +0800</pubDate>
      
      <guid>https://874656645.github.io/posts/126-makefile-%E4%BD%BF%E7%94%A8/</guid>
      <description>一、make  gcc 编译器 make 是 Linux 自带的构建器  二、文件命名  makefile Makefile  三、makefile 中的规则 例如：gcc a.c b.c c.c -o app
  规则由三部分组成：目标、依赖、命令
app:a.c b.c c.c  gcc a.c b.c c.c -o app   makefile 中可以有多条规则
  四、makefile 优化   版本一：
app:main.c add.c sub.c  gcc main.c add.c sub.c -I ./ -o app 存在的问题： 效率低，其中一个文件修改了，剩余的其它文件都要重新编译
  版本二：
app:main.o add.o sub.o  gcc main.o add.o sub.</description>
    </item>
    
    <item>
      <title>Linux 静态库与动态库</title>
      <link>https://874656645.github.io/posts/125-linux-%E9%9D%99%E6%80%81%E5%BA%93%E4%B8%8E%E5%8A%A8%E6%80%81%E5%BA%93/</link>
      <pubDate>Thu, 17 Feb 2022 22:25:34 +0800</pubDate>
      
      <guid>https://874656645.github.io/posts/125-linux-%E9%9D%99%E6%80%81%E5%BA%93%E4%B8%8E%E5%8A%A8%E6%80%81%E5%BA%93/</guid>
      <description>一、库是什么 库是二进制格式的源代码（二进制加密）
二、库的使用  头文件 制作的库文件  三、静态库的制作和使用  命名规则 libxxx.a 制作步骤  准备源代码文件 将源代码文件生成 .o 文件 gcc -c *.c 将 .o 文件打包（archive） ar rcs libxxx.a *.o 查看 lib 文件 nm libxxx.a   库的使用 gcc main.c -I./include -L ./lib -lmyCalc -o app  -L: 库的路径 -l: 库的名称（去掉 lib 前缀和 .a 后缀）    四、动态库的制作和使用  命名规则 libxxx.so 制作步骤  准备源代码文件 将源代码文件生成 .o 文件 gcc -c -fpic *.c 或者 gcc -c -fPIC *.</description>
    </item>
    
    <item>
      <title>gcc 相关</title>
      <link>https://874656645.github.io/posts/124-gcc-%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Wed, 16 Feb 2022 21:44:06 +0800</pubDate>
      
      <guid>https://874656645.github.io/posts/124-gcc-%E7%9B%B8%E5%85%B3/</guid>
      <description>一、gcc 工作流程  预处理 —— -E  宏替换 头文件展开 去掉注释 生成 .i 文件   编译 —— -S  生成 .s 文件 汇编文件   汇编 —— -c  生成 .o 文件 二进制文件   链接  二、gcc 常用参数  -v / --version -I : 编译时指定头文件路径 -c : 生成二进制文件 .o -o : 指定生成的文件名 -g : gdb 调试，生成带有调试信息的二进制文件（Debug模式） -D : 编译时指定一个宏 -Wall : 显示警告信息 -On : 优化代码，n 是优化级别（1，2，3）  </description>
    </item>
    
    <item>
      <title>vim 使用</title>
      <link>https://874656645.github.io/posts/122-vim-%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sun, 13 Feb 2022 19:38:16 +0800</pubDate>
      
      <guid>https://874656645.github.io/posts/122-vim-%E4%BD%BF%E7%94%A8/</guid>
      <description>一、使用教程   vimtutor
  显示行号:
vim ~/.vimrc 在文件的最后一行输入 set number 并保存退出   二、vim 三种工作模式  命令模式 编辑模式 末行模式
  三、命令模式下的相关操作  保存退出
ZZ 代码格式化
gg=G 光标移动：  左下上右：H J K L 移动到行首：0 移动到行尾：$ 移动到文件首部：gg 移动到文件尾部：G 跳转到第20行：20 + G 从当前位置向下移动 n 行：n + enter   删除命令：  删除光标后的一个字符：x（小写） 删除光标前的一个字符：X（大写） 删除一个单词：dw 删除光标前的所有字符：d0 删除光标后的所有字符：d$ 或者 D 删除光标所在行：dd 删除多行：ndd 删除光标所在行以及下面 n 行 删除光标所在行到文件首部的字符：dgg 删除光标所在行到文件尾部的字符：dG   撤销与反撤销：  撤销：u 反撤销：ctrl + r   复制粘贴：  复制一行：yy 复制多行：nyy 粘贴到光标下一行：p 粘贴到光标上一行：P(大写)   字符可视模式：v  移动光标 复制：y 删除：d 粘贴：p(小写 光标之后) P(大写 光标之前)   行可视模式：V  增加缩进：&amp;gt; 减少缩进：&amp;lt;   块可视模式：ctrl + V  o：将光标在块的左上角和右下角切换 O：将光标移动到所在行的对角 nl：将光标向右移动 n 个字符 nj：将光标向下移动 n 行 I：插入，按两次 ESC 退出（例如：多行注释操作）   替换操作：  r：替换光标后的字符 R：替换光标后的多个字符   查找操作：  /xxx ?</description>
    </item>
    
    <item>
      <title>Windows 10 中的 Linux 子系统</title>
      <link>https://874656645.github.io/posts/121-windows-10-%E4%B8%AD%E7%9A%84-linux-%E5%AD%90%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Sun, 13 Feb 2022 11:01:34 +0800</pubDate>
      
      <guid>https://874656645.github.io/posts/121-windows-10-%E4%B8%AD%E7%9A%84-linux-%E5%AD%90%E7%B3%BB%E7%BB%9F/</guid>
      <description>WSL 的基本命令
一、自动安装 满足 Win10 系统版本要求的（ Windows 10 版本 2004 及更高版本（内部版本 19041 及更高版本）或 Windows 11）可以使用这种方式
查看方式，Win + R 打开运行窗口，输入 winver 查看
  安装 WSL
wsl --install
  查看可用的 Linux 发行版
wsl -l -o
  查看已安装的 Linux 分发版
wsl -l -v
  注销 Linux 发行版
wsl --unregister Ubuntu
  可以直接从官网下载 Linux 发行版的安装包，然后将 appx 扩展名改为 zip，解压到想要放置的目录，双击 ubuntu.exe 启动，参考手动安装
  二、手动安装  注意：以下命令都是在以管理员权限运行的 PowerShell 中完成   启用 “适用于 Linux 的 Windows 子系统” 可选功能</description>
    </item>
    
    <item>
      <title>Linux 目录介绍</title>
      <link>https://874656645.github.io/posts/120-linux-%E7%9B%AE%E5%BD%95%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Thu, 10 Feb 2022 21:39:52 +0800</pubDate>
      
      <guid>https://874656645.github.io/posts/120-linux-%E7%9B%AE%E5%BD%95%E4%BB%8B%E7%BB%8D/</guid>
      <description>         bin 二进制文件，可执行文件   boot 系统开机启动项   dev device 设备（硬盘、显卡、显示器 一切皆文件）   lib 动态库   mnt 手动挂载目录   media 外设自动挂载目录   root 超级用户的家目录   usr unix system resource 头文件include、源文件src、用户安装程序/usr/local   etc 配置文件   opt 安装第三方应用程序   home Linux 所有用户的家目录（操作系统的家目录）   tmp 临时文件目录，系统重启后会被清空    </description>
    </item>
    
    <item>
      <title>Linux 常用命令</title>
      <link>https://874656645.github.io/posts/117-ubuntu-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Mon, 07 Feb 2022 08:33:51 +0800</pubDate>
      
      <guid>https://874656645.github.io/posts/117-ubuntu-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>Linux 命令大全
一、更新和升级包 1. 更新和升级包 sudo apt update &amp;amp;&amp;amp; sudo apt upgrade
2. 安装软件 sudo apt install tree
3. 删除不需要的包 sudo apt autoremove
4. 查看已安装的软件 dpkg -l | grep openssh-server
5. 查看软件安装的路径 dpkg -L openssh-server
whereis gdb
二、shell 操作和常用命令 1、查看输入的命令历史 history
2、删除光标前面的字符串 ctrl + u
3、删除光标后面的字符串 ctrl + k
4、光标定位到头部 ctrl + a
5、光标定位到尾部 ctrl + e
6、命令、路径补全 Tab
7、缩写别名 alias
8、查看说明 man 5 passwd
9、宿主目录 ~
10、查看目录内容 tree ~</description>
    </item>
    
  </channel>
</rss>
