<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Cesium for UE5 on Slow is Smooth and Smooth is Fast</title>
    <link>https://874656645.github.io/series/cesium-for-ue5/</link>
    <description>Recent content in Cesium for UE5 on Slow is Smooth and Smooth is Fast</description>
    <image>
      <url>https://874656645.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://874656645.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 10 Nov 2022 09:01:48 +0800</lastBuildDate><atom:link href="https://874656645.github.io/series/cesium-for-ue5/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Unreal5——开发、使用问题汇总</title>
      <link>https://874656645.github.io/posts/252-unreal5-%E5%BC%80%E5%8F%91%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</link>
      <pubDate>Thu, 10 Nov 2022 09:01:48 +0800</pubDate>
      
      <guid>https://874656645.github.io/posts/252-unreal5-%E5%BC%80%E5%8F%91%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</guid>
      <description>新建项目的时候没有项目模板
打开 Epic Games Launcher，在 虚幻引擎 -&amp;gt; 库 中选择需要添加组件的引擎版本，打开 选项 面板，勾选需要更改的组件
  在 Play 模式下切换到鼠标控制
Shift + F1
  Detaches from the player controller，通过鼠标操作场景和 Editor
F8
  指定源码开发工具
Editor Preferences -&amp;gt; Source Code
  C++ 代码编译
Editor 右下角
  C++ Live Coding 热编译
Ctrl + Alt + F11
  C++ 项目中使用插件
如果编译过程中提示错误 ERROR: Expecting to find a type to be declared in a module rules named &amp;lsquo;JsonLibrary&amp;rsquo; in UE5Rules</description>
    </item>
    
    <item>
      <title>Cesium4Unreal——Importing Quixel Assets</title>
      <link>https://874656645.github.io/posts/251-cesium-unreal-importing-quixel-assets/</link>
      <pubDate>Tue, 25 Oct 2022 09:48:36 +0800</pubDate>
      
      <guid>https://874656645.github.io/posts/251-cesium-unreal-importing-quixel-assets/</guid>
      <description>一、安装 Quixel Bridge   UE5 中已经集成了 Quixel Bridge 插件，不再需要单独安装（安装包），选择 编辑（Edit）&amp;gt; 插件（Plugins） 。在搜索栏中输入 bridge ，然后点击复选框以启用该插件。
  如果在插件面板中未显示 Quixel Bridge 插件，需要从 Epic Games 启动程序（Epic Games Launcher） 安装它。打开 Epic Games 启动程序，点击 库（Library） ，然后向下滚动到名为 保管库（Vault） 的分割线。在搜索栏中输入 Bridge 。选择 安装到引擎（Install to Engine） 。重新启动引擎时，可以按如上所述启用该插件。
  使用 EPIC GAME 账户 登录到 Quixel Bridge 并进行授权，加入 Unreal Unlimited 计划，如有需要，请科学上网
  如果发现账户无法登录，采用下面的步骤解决：
科学上网 如果已经运行，请关闭 Bridge； 导航到 C:\Users[用户]\AppData\Roaming 删除 Bridge、Bridge-Bifrost、Megascans Bridge 三个文件夹 重新登录到 Bridge    二、在项目中导入资源   打开 Bridge 面板，搜索自己需要的资源，并将其下载到本地</description>
    </item>
    
    <item>
      <title>Cesium4Unreal——Build a Flight Tracker With Cesium for Unreal</title>
      <link>https://874656645.github.io/posts/250-cesium-unreal-build-a-flight-tracker-with-cesium-for-unreal/</link>
      <pubDate>Wed, 19 Oct 2022 14:25:50 +0800</pubDate>
      
      <guid>https://874656645.github.io/posts/250-cesium-unreal-build-a-flight-tracker-with-cesium-for-unreal/</guid>
      <description>第一步：创建一个关卡  创建一个空的 Unreal 关卡； 登录 Cesium ion 并添加 Cesium World Terrain 和 CesiumSunSky； 设置 CesiumGeoreference 的坐标为 San Francisco International Airport (SFO)；
Origin Latitude = 37.61779
Origin Longitude = -122.390533
Origin Height = 0.0  第二步：添加 PlaneTrack 类   在 UE Editor 中添加 C++ 类，选择 Actor 作为父类，点击【下一步】，输入类名 PlaneTrack，点击【创建类】按钮，此时 Visual Studio 会自动打开，如果没有打开，可以通过【工具】——【打开Visual Studio】手动打开项目
VS 2022 解决方案类似下图：
  添加下面的代码到 project.Build.cs 文件：
// Add Cesium for Unreal plugin dependency path PrivateDependencyModuleNames.AddRange(new string[] { &amp;#34;CesiumRuntime&amp;#34; }); // Tell Unreal Engine to use C++17 CppStandard = CppStandardVersion.</description>
    </item>
    
    <item>
      <title>Unreal——使用蓝图获取 uasset 资源</title>
      <link>https://874656645.github.io/posts/219-unreal-%E4%BD%BF%E7%94%A8%E8%93%9D%E5%9B%BE%E8%8E%B7%E5%8F%96-uasset-%E8%B5%84%E6%BA%90/</link>
      <pubDate>Thu, 11 Aug 2022 17:40:41 +0800</pubDate>
      
      <guid>https://874656645.github.io/posts/219-unreal-%E4%BD%BF%E7%94%A8%E8%93%9D%E5%9B%BE%E8%8E%B7%E5%8F%96-uasset-%E8%B5%84%E6%BA%90/</guid>
      <description>方法一：   可以通过 获取资产注册表（Get Asset Registry） + 按路径获取资产（Get Asset by Path） 获取路径下的所有类型资产；
  通过 获取完整名称（GetFullName） + 包含（Contains） 筛选需要的资产；
  通过 获取资产（GetAsset） 获取资产对象
  资产对象的属性：
  方法二：   可以通过 获取资产注册表（Get Asset Registry） + 按对象路径获取资产（Get Asset by Object Path） 直接获取想要的资产对象；
  再通过 获取资产（GetAsset） + cast 将资产对象转换为需要的对象类型；
  注意：资产路径的格式：
 map : World&#39;/Game/Maps/NewWorld.NewWorld&#39; 蓝图类 : 要加 _C 例如 Blueprint&#39;/Game/Blueprints/MySpringArmPawn.MySpringArmPawn_C&#39;  参考：
 UE4 | BP | 使用蓝图获取Uasset资源 关于UE4动态资源加载(蓝图类)  </description>
    </item>
    
    <item>
      <title>Unreal——蓝图接口</title>
      <link>https://874656645.github.io/posts/218-unreal-%E8%93%9D%E5%9B%BE%E6%8E%A5%E5%8F%A3/</link>
      <pubDate>Wed, 10 Aug 2022 11:27:36 +0800</pubDate>
      
      <guid>https://874656645.github.io/posts/218-unreal-%E8%93%9D%E5%9B%BE%E6%8E%A5%E5%8F%A3/</guid>
      <description>  蓝图接口（Blueprint Interface） 是一个或多个函数的集合——只有名称，没有实现。
  由于接口函数没有实现，作为设计人员，所能做的就是指定一系列类型化输入和输出。
  蓝图接口也有一定的局限性：
 不能包含变量 不能编辑图表 不能添加组件    其他蓝图类 Actor 实现蓝图接口：
在 类设置 中添加接口
  参考：
 蓝图接口 【教程】UE4中接口的使用&amp;ndash;蓝图篇（一）  </description>
    </item>
    
    <item>
      <title>Unreal——Actor 蓝图类</title>
      <link>https://874656645.github.io/posts/217-unreal-actor-%E8%93%9D%E5%9B%BE%E7%B1%BB/</link>
      <pubDate>Wed, 10 Aug 2022 11:23:12 +0800</pubDate>
      
      <guid>https://874656645.github.io/posts/217-unreal-actor-%E8%93%9D%E5%9B%BE%E7%B1%BB/</guid>
      <description>  所有可以放入关卡的对象都是 Actor，比如摄像机、静态网格体、玩家起始位置。
  Actor支持三维变换，例如平移、旋转和缩放。
  可以通过游戏逻辑代码（C++或蓝图）创建（在蓝图中使用 从类生成Actor 节点）或 销毁Actor。
  每一个 Actor 均有一个 DefaultSceneRoot 组件，它是默认情况下的场景组件（SceneComponent），该组件不支持可视化，在场景中是看不到的，也不可分配网格，只是 Actor 的默认场景根。
  Actor 必须有一个默认场景根。可以使用其他的组件替换默认场景根，但是只要删除所有的其他组件，场景默认根（DefaultSceneRoot）就会自动显示，这个变量名是系统保留，不能用来命名他组件。
  当设置Actor的位置、旋转、缩放时，同时也在设置默认场景根的位置、旋转、缩放。
  注意：
 Actor 不直接保存变换（位置、旋转和缩放）数据，只是一个可以挂载Component的类而已 在某种意义上，Actor 可被视为包含特殊类型 对象（称作组件 Component）的容器 如果 Actor 的根组件存在，则使用它的变换数据    参考：
 Actors UE4-Actor  </description>
    </item>
    
    <item>
      <title>Unreal——通用基类（Actor、Pawn、Character等）</title>
      <link>https://874656645.github.io/posts/216-unreal-%E9%80%9A%E7%94%A8%E5%9F%BA%E7%B1%BBactorpawncharacter%E7%AD%89/</link>
      <pubDate>Wed, 10 Aug 2022 10:02:42 +0800</pubDate>
      
      <guid>https://874656645.github.io/posts/216-unreal-%E9%80%9A%E7%94%A8%E5%9F%BA%E7%B1%BBactorpawncharacter%E7%AD%89/</guid>
      <description>Actor
  Actor 是可以放到关卡中的任何对象，例如摄像机、静态网格体或玩家出生点位置
  Actor 支持 3D 变换，例如转换、旋转和缩放
  Actor 在 UE 中是只是一个可以挂载 Component的类而已。所以，需要挂载组件的时候，才应该继承自 Actor 类。很多时候，写一个 Manager 或者一个 Data 又或者只是解析一个Config，只需要写一个 C++ 类就可以了
  可以通过 gameplay 代码（C++ 或蓝图）创建（生成）或销毁 Actor，在蓝图中使用 从类生成Actor 节点，生成后就自动添加到场景中并能在场景中看到
    Pawn
Pawn 是 Actor 的子类，作为游戏内的形象或人像（例如游戏中的角色）。玩家或游戏的 AI 可以控制 Pawn，将其作为非玩家角色（NPC），可以理解为在游戏中的肉体。
  Character
 角色（Character） 是计划用作玩家角色的 Pawn Actor 的子类。角色子类包括碰撞设置、双足运动的输入绑定以及用于玩家控制动作的其他代码 相比于 Pawn 类，Character 类提供了一个Movement 组件，这个组件提供了角色移动基本逻辑功能，包括角色的移动和跳跃，还可以依据需求扩展出不同的移动状态，比如爬行、蹲伏 当对象逻辑简单、不需要过多的逻辑动作（比如方块、飞船）那么可以选择继承 Pawn 而不是继承 Character 类    Controller</description>
    </item>
    
    <item>
      <title>Unreal——蓝图函数、事件和宏</title>
      <link>https://874656645.github.io/posts/215-unreal-%E8%93%9D%E5%9B%BE%E5%87%BD%E6%95%B0%E4%BA%8B%E4%BB%B6%E5%92%8C%E5%AE%8F/</link>
      <pubDate>Tue, 09 Aug 2022 19:38:55 +0800</pubDate>
      
      <guid>https://874656645.github.io/posts/215-unreal-%E8%93%9D%E5%9B%BE%E5%87%BD%E6%95%B0%E4%BA%8B%E4%BB%B6%E5%92%8C%E5%AE%8F/</guid>
      <description>  函数调用会等待函数执行结果，事件调用只是触发但不会等待
事件是异步执行，触发后，会在新的线程中执行，所以可以使用 Delay，函数和宏的调用是同步执行，是单线程的，所以在函数中不能使用 Timeline、Delay 和 Http 请求 等操作。
  事件没有返回值，函数和宏可以有返回值
  函数和事件可以跨蓝图类访问，而宏只可以在定义的蓝图类内访问（宏库可以跨蓝图类访问）
  函数可以用局部变量，事件没有局部变量
  因为函数执行顺序有保证，所以优先使用函数
  函数可以被继承，而宏不可以被继承，子类无法使用父类的宏
  没有返回值的函数，在被子类 Overide 时，会变成事件
  参考：
 UE4蓝图之函数、事件、宏的区别 【UE4笔记】Event&amp;amp;Function事件和函数的区别 [UE4]函数和事件的区别  </description>
    </item>
    
    <item>
      <title>Unreal——DefaultGraphicsRHI</title>
      <link>https://874656645.github.io/posts/214-unreal-defaultgraphicsrhi/</link>
      <pubDate>Thu, 04 Aug 2022 14:57:18 +0800</pubDate>
      
      <guid>https://874656645.github.io/posts/214-unreal-defaultgraphicsrhi/</guid>
      <description>注意： UE5 默认使用的是 DX12，有可能会在渲染方面出现奇怪的问题，需要特别注意。
RHI 是 Render Hardware Interface 的缩写，虚幻引擎通过 RHI 把各个平台的图形 API 包装成统一接口，供上层渲染来使用，让业务不用过多的关注 API 细节（实际还得关注RHI 细节）。从代码结构上来看，RHI 封装的比较贴合于现代的图形 API(vulkan, metal, DX12)，也支持 opengl/opengles。这个接口是广义上的概念，不仅指 C++ 的纯虚基类，也包括一些全局变量，全局函数等。
参考：
 UE4/UE5的RHI(Vulkan为例)  </description>
    </item>
    
    <item>
      <title>Unreal——像素流送播放器页面与 UE 通信</title>
      <link>https://874656645.github.io/posts/203-unreal-%E5%83%8F%E7%B4%A0%E6%B5%81%E9%80%81%E6%92%AD%E6%94%BE%E5%99%A8%E9%A1%B5%E9%9D%A2%E4%B8%8E-ue-%E9%80%9A%E4%BF%A1/</link>
      <pubDate>Fri, 08 Jul 2022 17:50:31 +0800</pubDate>
      
      <guid>https://874656645.github.io/posts/203-unreal-%E5%83%8F%E7%B4%A0%E6%B5%81%E9%80%81%E6%92%AD%E6%94%BE%E5%99%A8%E9%A1%B5%E9%9D%A2%E4%B8%8E-ue-%E9%80%9A%E4%BF%A1/</guid>
      <description>一、HTML 页面  必须包含 webRtcPlayer.js 脚本文件，该文件处理浏览器和虚幻引擎应用间的通信，接受并显示来自服务器的媒体流。在非必要的情况下，请勿修改此JavaScript文件。
&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;scripts/webRtcPlayer.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; 建议包含 app.js 脚本文件，此文件将设置处理键盘、鼠标和触摸事件的事件监听器，其还包含数个可在播放器页面使用的函数。
&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;scripts/app.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; 页面必须含有一个 ID 为 player 的 div 元素。该元素可被流送自 UE4 应用的视频帧所替换。
&amp;lt;div id=&amp;quot;player&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; 页面加载时必须调用 app.js 文件提供的 load 函数。  二、访问像素流送蓝图 API 在虚幻引擎中运行的像素流送插件会公开一个蓝图API，可在 gameplay 逻辑中使用该 API 处理播放器 HTML 页面发送的自定义 UI 事件，并将事件从虚幻引擎发送到播放器页面，实现网页客户端与 UE 运行程序之间的交互通信。
推荐将 像素流送插件（Pixel Streaming Input） 组件添加到 PlayerController 中。
三、从播放器页面到 UE 的通信 app.js 文件提供两个可在 HTML 播放器页面进行调用的 JavaScript 函数，以便用户从浏览器向虚幻引擎程序发送事件和命令：emitCommand 和 emitUIInteraction 函数。
  js 代码：
// 从播放器页面到UE4的通信  let testButton = document.</description>
    </item>
    
    <item>
      <title>Unreal——像素流送</title>
      <link>https://874656645.github.io/posts/202-unreal-%E5%83%8F%E7%B4%A0%E6%B5%81%E9%80%81/</link>
      <pubDate>Fri, 08 Jul 2022 15:50:34 +0800</pubDate>
      
      <guid>https://874656645.github.io/posts/202-unreal-%E5%83%8F%E7%B4%A0%E6%B5%81%E9%80%81/</guid>
      <description>有两种方式启动三维渲染服务器  一、方式一：使用 UE Editor 作为渲染服务器  启用像素流送插件
【Pixel Streaming】 启用触控设备输入（可选）
【编辑（Edit）】 &amp;gt; 【项目设置（Project Settings）】 &amp;gt; 【引擎（Engine）】 &amp;gt; 【输入（Input category）】 下启用 【固定显示触控界面（Always Show Touch Interface）】 设置 设置额外启动参数
【编辑（Edit）】 &amp;gt; 【编辑器偏好（Editor Preferences&amp;hellip;）】 &amp;gt; 【关卡编辑器（Level Editor）】 &amp;gt; 【播放（Play）】 &amp;gt; 【额外启动参数（Additional Launch Parameters）】中添加参数 -AudioMixer -PixelStreamingIP=localhost -PixelStreamingPort=8888 -AllowPixelStreamingCommands 启动游戏
通过独立进程游戏的模式启动游戏
  二、方式二：通过打包的程序  打包前对 UE Editor 进行配置，参照方式一的前两步 启动【打包项目】
 设置启动程序的命令行标签  按住 Alt 键并拖动 .exe 文件即可在相同文件夹中（或在其他任意处）新建一个快捷方式 右键点击快捷方式并从上下文菜单中选择 属性（Properties） 在 快捷方式属性（Shortcut Properties） 窗口的 快捷方式（Shortcut） 选项卡中，在 目标（Target） 域的末尾附加文本 -AudioMixer -PixelStreamingIP=localhost -PixelStreamingPort=8888 -RenderOffScreen 并点击 确认    三、启动服务器 启动一个服务，在虚幻引擎应用程序和客户端浏览器间建立点对点的连接（WebRTC）</description>
    </item>
    
    <item>
      <title>Unreal Engine 5 打包</title>
      <link>https://874656645.github.io/posts/201-unreal-engine-5-%E6%89%93%E5%8C%85/</link>
      <pubDate>Thu, 07 Jul 2022 10:23:08 +0800</pubDate>
      
      <guid>https://874656645.github.io/posts/201-unreal-engine-5-%E6%89%93%E5%8C%85/</guid>
      <description>UE5 打包：
如果平台前面有感叹号表示缺少 SDK 环境
 注意： 安装完 SDK 后要重启电脑   Windows SDK 18362 or Newer .NET Core 3.1  </description>
    </item>
    
    <item>
      <title>Unreal——智慧城市项目搭建</title>
      <link>https://874656645.github.io/posts/199-unreal-%E6%99%BA%E6%85%A7%E5%9F%8E%E5%B8%82%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Thu, 30 Jun 2022 15:12:06 +0800</pubDate>
      
      <guid>https://874656645.github.io/posts/199-unreal-%E6%99%BA%E6%85%A7%E5%9F%8E%E5%B8%82%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/</guid>
      <description>一、项目目录 —— 内容
—— Maps
—— UMG
—— Mesh
—— 材质
—— 蓝图
—— 贴图
—— 团队人员
—— 产品经理
—— 平面
—— UE 美术 —— UE 技术美术 —— 模型师
—— UE 程序
学习网址  可视化展示系列教程 基础  高级UE开发工程师 岗位职责：
 负责 UE 客户端功能的设计、开发实现； 负责与产品对接功能需求，以及其他开发人员讨论需求，合作完成产品开发； 配合美术，策划完成各种效果的实现，与团队成员沟通协调，完成内容制作与优化； 保证代码质量与运行效率，持续进行项目功能优化、迭代、代码调试及 bug 修复；  任职要求：
 本科或以上学历，2年以上 UE 工作经验，至少参与过两个商业项目； 可以撰写 UE 引擎技术文档，并与美术配合将项目资源导入引擎； 熟悉 UE 开发流程和步骤，熟练使用 UE 蓝图编程及插件技术，熟悉 UE C++ 与蓝图的交互机制； 熟悉 UMG 的 GUI 开发等； 有较强的学习能力和解决问题能力，勇于承担责任，具有良好的团队交流和协作能力；  </description>
    </item>
    
    <item>
      <title>Unreal——智慧城市项目技术路线和软件</title>
      <link>https://874656645.github.io/posts/198-unreal-%E6%99%BA%E6%85%A7%E5%9F%8E%E5%B8%82%E9%A1%B9%E7%9B%AE%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF%E5%92%8C%E8%BD%AF%E4%BB%B6/</link>
      <pubDate>Wed, 29 Jun 2022 10:18:09 +0800</pubDate>
      
      <guid>https://874656645.github.io/posts/198-unreal-%E6%99%BA%E6%85%A7%E5%9F%8E%E5%B8%82%E9%A1%B9%E7%9B%AE%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF%E5%92%8C%E8%BD%AF%E4%BB%B6/</guid>
      <description>软件和插件：
 Blender 和 BlenderGis 插件 C4D CityEngine Unreal Engine `Cesium for Unreal Engine&#39; `CityEngine VR Experience for Unreal Engine&#39; datasmith for Unreal Engine CesiumLab 地编素材库（city park environment collection） HDRI 插件和 HDRI 素材 ArchViz Explorer 项目，场景 Pawn 操作 Factory Environment Collection json读取插件：json assets、json library、jsonxmlhelper、varest 网页插件：web ui 视频流：web camera Water 插件 基于精确地理的太阳定位工具  蓝图开发：
 通过鼠标左键、右键和滚轮控制相机移动、缩放和旋转 Cesium 场景搭建 3DTiles 模型加载 3DMax 场景导入 UI界面搭建（用户界面、控件蓝图、商城UI插件Custom UI） 天气切换 控制器切换（自由、人行、驾驶） 长度测量（射线——由通道检测线条，缆索Actor） 面积测量 添加POI  三维效果：</description>
    </item>
    
  </channel>
</rss>
